{"version":3,"sources":["store/actions/actionTypes.js","axios.js","services/userService.js","containers/System/Admin/UserRedux.js","containers/System/Admin/TableManageUser.js","containers/HomePage/Section/OutStandingDoctor.js","store/actions/appActions.js","store/actions/userActions.js","store/actions/adminActions.js","store/reducers/appReducer.js","store/reducers/userReducer.js","store/reducers/adminReducer.js","store/reducers/rootReducer.js","redux.js","hoc/authentication.js","routes/Home.js","containers/Auth/Login.js","utils/emitter.js","containers/System/ModalUser.js","containers/System/ModalEditUser.js","containers/System/UserManage.js","components/Navigator.js","containers/Header/menuApp.js","containers/Header/Header.js","containers/System/Admin/ManageDoctor.js","containers/System/Specialty/ManageSpecialty.js","containers/System/Clinic/ManageClinic.js","routes/System.js","assets/logo.svg","containers/HomePage/HomeHeader.js","containers/HomePage/Section/Specialty.js","containers/HomePage/Section/MedicalFacility.js","containers/HomePage/Section/HandBook.js","containers/HomePage/Section/About.js","containers/HomePage/HomeFooter.js","containers/HomePage/HomePage.js","containers/Patient/Doctor/ProfileDoctor.js","components/Input/DatePicker.js","containers/Patient/Doctor/Modal/BookingModal.js","containers/Patient/Doctor/DoctorSchedule.js","containers/Patient/Doctor/DoctorExtraInfor.js","containers/Patient/SocialPlugin/LikeAndShare.js","containers/Patient/SocialPlugin/Comment.js","containers/Patient/Doctor/DetailDoctor.js","containers/System/Doctor/ManageSchedule.js","containers/System/Doctor/RemedyModal.js","containers/System/Doctor/ManagePatient.js","routes/Doctor.js","containers/Patient/VerifyEmail.js","containers/Patient/Specialty/DetailSpecialty.js","containers/Patient/Clinic/DetailClinic.js","containers/App.js","serviceWorker.js","hoc/IntlProviderWrapper.js","index.js","utils/constant.js","utils/CommonUtils.js","utils/KeyCodeUtils.js","utils/LanguageUtils.js","components/CustomToast.js","components/CustomScrollbars.js"],"names":["actionTypes","Object","freeze","APP_START_UP_COMPLETE","SET_CONTENT_OF_CONFIRM_MODAL","CHANGE_LANGUAGE","ADD_USER_SUCCESS","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","PROCESS_LOGOUT","FETCH_GENDER_START","FETCH_GENDER_SUCCESS","FETCH_GENDER_FAIDED","FETCH_POSITION_SUCCESS","FETCH_POSITION_FAIlDED","FETCH_ROLE_SUCCESS","FETCH_ROLE_FAILDED","CREATE_USER_SUCCESS","CREATE_USER_FAILDED","EDIT_USER_SUCCESS","EDIT_USER_FAILDED","DELETE_USER_SUCCESS","DELETE_USER_FAILDED","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_FAILDED","FETCH_TOP_DOCTORS_SUCCESS","FETCH_TOP_DOCTORS_FAILDED","FETCH_ALL_DOCTORS_SUCCESS","FETCH_ALL_DOCTORS_FAILDED","SAVE_DETAIL_DOCTOR_SUCCESS","SAVE_DETAIL_DOCTOR_FAILDED","FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS","FETCH_ALLCODE_SCHEDULE_TIME_FAILDED","FETCH_REQUIRED_DOCTOR_INFOR_START","FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS","FETCH_REQUIRED_DOCTOR_INFOR_FAIDED","instance","axios","create","baseURL","process","REACT_APP_BACKEND_URL","interceptors","response","use","data","handleLoginApi","userEmail","userPassword","post","email","password","getAllUsers","inputId","get","createNewUserService","console","log","deteleUserService","userId","delete","id","editUserService","inputData","put","getAllCodeService","inputType","getTopDoctorHomeService","limit","getAllDoctors","saveDetailDoctorService","getDetailInforDoctor","saveBulkScheduleDoctor","getScheduleDoctorByDate","doctorId","date","getExtraInforDoctorById","getProfileDoctorById","postPatientBookAppointment","postVerifyBookAppointment","createNewSpecialty","getAllSpecialty","getAllClinic","getAllDetailSpecialtyById","location","getAllDetailClinicById","createNewClinic","getAllPatientForDoctor","postSendRemedy","UserRedux","props","handleOnchangeImage","event","a","target","files","file","CommonUtils","getBase64","base64","objectUrl","URL","createObjectURL","setState","previewImgURL","avatar","openPreviewImage","state","isOpen","handleSaveUser","checkValidateInput","action","CRUD_ACTIONS","CREATE","createNewUser","firstName","lastName","address","phonenumber","phoneNumber","gender","roleId","role","positionId","position","EDIT","editAUserRedux","userEditId","isValid","arrCheck","i","length","alert","onChangeInput","copyState","value","handleEditUserFromParent","user","imageBase64","image","Buffer","from","toString","genderArr","positionArr","roleArr","this","getGenderStart","getPositionStart","getRoleStart","prevProps","prevState","snapshot","genderRedux","arrGenders","keyMap","roleRedux","arrRoles","positionRedux","arrPositions","listUsers","genders","roles","positions","language","isGetGenders","isLoadingGender","className","type","onChange","disabled","map","item","index","LANGUAGES","VI","valueVi","valueEn","hidden","htmlFor","style","backgroundImage","onClick","handleEditUserFromParentKey","mainSrc","onCloseRequest","Component","connect","app","admin","users","dispatch","actions","fetchUserRedux","mdParser","MarkdownIt","handleEditorChange","html","text","TableManageUser","handleDeleteUser","deleteAUserRedux","handleEditUser","usersRedux","arrUsers","Fragment","height","renderHTML","render","OutStandingDoctor","handleViewDetailDoctor","doctor","history","push","arrDoctors","topDoctorsRedux","loadTopDoctors","settings","nameVi","positionData","nameEn","withRouter","isLoggedIn","topDoctors","changeLanguageApp","languageInput","userLoginSuccess","userInfo","processLogout","fetchGenderStart","getState","res","errCode","fetchGenderSuccess","fetchGenderFailed","genderData","fetchPositionFailed","fetchRoleFailed","fetchPositionStart","fetchRoleStart","roleData","toast","success","saveUserSuccess","fetchAllUsersStart","saveUserFailed","fetchAllUsersSuccess","reverse","error","fetchAllUsersFailed","deleteAUser","deleteUserSuccess","deleteUserFailed","editAUser","editUserSuccess","editUserFailed","fetchTopDoctor","dataDoctors","fetchAllDoctors","dataDr","saveDetailDoctor","fetchAllScheduleTime","dataTime","getRequiredDoctorInfor","resPrice","resPayment","resProvince","resSpecialty","resClinic","fetchRequiredDoctorInforSuccess","fetchRequiredDoctorInforFailed","allRequiredData","initialState","started","systemMenuPath","contentOfConfirmModal","messageId","handleFunc","dataFunc","appReducer","allDoctors","allScheduleTime","allRequiredDoctorInfor","adminReducer","persistCommonConfig","storage","stateReconciler","autoMergeLevel2","userPersistConfig","key","whitelist","appPersistConfig","createBrowserHistory","basename","reduxStateSyncConfig","rootReducer","combineReducers","router","connectRouter","persistReducer","userReducer","middleware","routerMiddleware","thunkMiddleware","createStateSyncMiddleware","composeEnhancers","compose","reduxStore","createStore","applyMiddleware","persistor","persistStore","locationHelper","locationHelperBuilder","userIsAuthenticated","connectedRouterRedirect","authenticatedSelector","wrapperDisplayName","redirectPath","userIsNotAuthenticated","ownProps","getRedirectQueryParam","allowRedirectBack","Home","linkToRedirect","to","Login","handleOnChangeUsername","username","handleOnChangePassword","handleLogin","errMessage","message","handleShowHidePassword","isShowPassword","handleKeyDown","keyCode","placeholder","onKeyDown","color","navigate","path","userInfor","_emitter","EventEmitter","setMaxListeners","emitter","ModalUser","toggle","toggleFromParent","handleOnChageInput","arrInput","handleAddNewUser","createNewuser","listenToEmitter","on","Modal","size","ModalHeader","ModalBody","ModalFooter","Button","ModalEditUser","editUser","currentUser","_","isEmpty","UserManage","getAllUsersFromReact","isOpenModalUser","toggleUserModal","toggleUserEditModal","isOpenModalEditUser","emit","userEdit","doEditUser","MenuGroup","name","children","Menu","active","link","hasSubMenu","onLinkClick","data-toggle","aria-expanded","SubMenu","getItemClass","pathname","MenuGroupWithRouter","MenuWithRouter","SubMenuWithRouter","Navigator","expandedMenu","groupIndex","menuIndex","isMenuHasSubMenuActive","subMenus","currentPath","checkActiveMenu","menus","outerLoop","group","j","menu","isSubMenuOpen","subMenu","subMenuIndex","closeOtherExpand","withRouterInnerRef","WrappedComponent","InnerComponentWithRef","forwardRef","rest","ref","React","ComponentWithRef","withRef","adminMenu","doctorMenu","Header","handleChangeLanguage","changeLanguageAppRedux","menuApp","USER_ROLE","ADMIN","DOCTOR","EN","title","ManageDoctor","buildDataInputSelect","result","object","labelVi","labelEn","label","contentMarkdown","contentHTML","handleSaveContentMarkdown","hasOldData","description","selectedOption","selectedPrice","selectedPayment","selectedProvince","nameClinic","addressClinic","note","clinicId","selectedClinic","specialtyId","selectedSpecialty","handleChangeSelect","listPayment","listPrice","listProvince","listSpecialty","listClinic","Markdown","markdown","paymentId","priceId","provinceId","Doctor_Infor","find","handleChangeSelectDoctorInfor","stateName","stateCopy","handleOnChangeText","listDoctors","getAllRequiredDoctorInfor","dataSelect","dataSelectPrice","dataSelectPayment","dataSelectProvince","dataSelectSpecialty","dataSelectClinic","options","ManageSpecialty","handleOnChangeInput","descriptionHTML","descriptionMarkdown","handleSaveNewSpecialty","ManageClinic","handleSaveNewClinic","System","component","HomeHeader","changeLanguage","returnToHome","src","logo","isShowBanner","Specialty","handleViewDetailSpecialty","dataSpecialty","MedicalFacility","handleViewDetailClinic","clinic","dataClinics","HandBook","About","width","frameBorder","allow","allowFullScreen","HomeFooter","href","HomePage","dots","infinite","speed","slidesToShow","slidesToScroll","ProfileDoctor","getInforDoctor","renderTimeBooking","time","timeTypeData","moment","unix","format","locale","dataProfile","isShowDescriptionDoctor","isShowPrice","isShowLinkDetail","priceTypeData","displayType","thousandSeparator","suffix","DatePicker","flatpickrNode","nodeRef","element","flatpickr","node","addEventListener","handleBlur","handlerKeyDown","which","KeyCodeUtils","ENTER","preventDefault","valueMoment","toDate","onOpen","blur","checkDateValue","str","max","charAt","num","parseInt","isNaN","autoFormatOnChange","seperator","input","RegExp","test","substr","values","split","v","replace","join","onInputChange","e","DISPLAY_FORMAT","DATE_FORMAT_AUTO_FILL","converted","SEPERATOR","onInputBlur","removeEventListener","close","minDate","onClose","otherProps","dateFormat","allowInput","disableMobile","BookingModal","buildDataGender","handleOnchangeInput","valueInput","handleOnchangeDatePicker","birthday","selectedGender","buildTimeBooking","buildDoctorName","doctorData","handleConfirmBooking","isShowLoading","Date","getTime","timeString","doctorName","fullName","reason","timeType","closeBookingClose","getGenders","isOpenModal","spinner","centered","DoctorSchedule","getArrDays","allDays","ddMM","today","add","capitalizeFirstLetter","startOf","valueOf","handleOnChangeSelect","doctorIdFromParent","allAvalableTime","handleClickScheduleTime","isOpenModalBooking","dataScheduleTimeModal","string","toUpperCase","slice","timeDisplay","DoctorExtraInfor","showHideDetailInfor","status","isShowDetailInfor","extraInfor","paymentTypeData","LikeAndShare","window","FB","XFBML","parse","fbAsyncInit","init","appId","cookie","xfbml","version","d","s","js","fjs","getElementsByTagName","getElementById","createElement","parentNode","insertBefore","document","initFacebookSDK","dataHref","data-href","data-width","data-layout","data-action","data-size","data-share","Comment","numPost","data-numposts","DetailDoctor","detailDoctor","currentDoctorId","match","params","currentURL","dangerouslySetInnerHTML","__html","ManageSchedule","selectedDoctor","currentDate","handleClickBtnTime","rangeTime","isSelected","handleSaveSchedule","formatedDate","selectedTime","filter","schedule","arrSchedule","yesterday","setDate","getDate","RemedyModal","handleOnchangeEmail","imgBase64","handleSendRemedy","sendRemedy","dataModal","closeRemedyModal","aria-label","aria-hidden","ManagePatient","getDataPatient","dataPatient","handleBtnConfirm","patientId","patientData","patientName","isOpenRemedyModal","dataChild","timeTypeDataPatient","colSpan","textAlign","Doctor","VerifyEmail","statusVerify","search","urlParams","URLSearchParams","token","DetailSpecialty","arrDoctorId","arr","doctorSpecialty","dataDetailSpecialty","dataProvince","unshift","createdAt","DetailClinic","dataDetailClinic","doctorClinic","App","handlePersistorState","bootstrapped","onBeforeLift","Promise","resolve","then","catch","CustomScrollbars","HOME","exact","LOGIN","SYSTEM","HOMEPAGE","DETAIL_DOCTOR","DETAIL_SPCIALTY","DETAIL_CLINIC","VERIFY_EMAIL_BOOKING","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","hostname","messages","LanguageUtils","getFlattenedMessages","IntlProviderWrapper","defaultLocale","ReactDOM","store","navigator","serviceWorker","ready","registration","unregister","LOG_OUT","DELETE","READ","PATIENT","reject","reader","FileReader","readAsDataURL","onload","onerror","UP","DOWN","TAB","E","ESCAPE","flattenMessages","nestedMessages","prefix","keys","reduce","prefixedKey","assign","messages_vi","messages_en","lang","CustomToast","titleId","hour","minute","second","hour12","autoHeight","autoHeightMin","autoHeightMax","msg","createRef","getScrollLeft","current","getScrollTop","scrollToBottom","targetScrollTop","getScrollHeight","scrollTo","targetTop","quickScroll","scrollbars","originalTop","iteration","scroll","scrollTop","setTimeout","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","renderNone","disableVerticalScroll","disableHorizontalScroll","autoHide","autoHideTimeout","hideTracksWhenNotNeeded"],"mappings":"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","file":"static/js/main.4938c0b9.chunk.js","sourcesContent":["const actionTypes = Object.freeze({\r\n    //app\r\n    APP_START_UP_COMPLETE: 'APP_START_UP_COMPLETE',\r\n    SET_CONTENT_OF_CONFIRM_MODAL: 'SET_CONTENT_OF_CONFIRM_MODAL',\r\n    CHANGE_LANGUAGE: 'CHANGE_LANGUAGE',\r\n\r\n    //user\r\n    ADD_USER_SUCCESS: 'ADD_USER_SUCCESS',\r\n\r\n    USER_LOGIN_SUCCESS: 'USER_LOGIN_SUCCESS',\r\n    USER_LOGIN_FAIL: 'USER_LOGIN_FAIL',\r\n    PROCESS_LOGOUT: 'PROCESS_LOGOUT',\r\n\r\n\r\n    //admin\r\n    FETCH_GENDER_START: 'FETCH_GENDER_START',\r\n    FETCH_GENDER_SUCCESS: 'FETCH_GENDER_SUCCESS',\r\n    FETCH_GENDER_FAIDED: 'FETCH_GENDER_FAIDED',\r\n\r\n    FETCH_POSITION_SUCCESS: 'FETCH_POSITION_SUCCESS',\r\n    FETCH_POSITION_FAIlDED: 'FETCH_POSITION_FAIlDED',\r\n\r\n    FETCH_ROLE_SUCCESS: 'FETCH_ROLE_SUCCESS',\r\n    FETCH_ROLE_FAILDED: 'FETCH_ROLE_FAILDED',\r\n\r\n    CREATE_USER_SUCCESS: 'CREATE_USER_SUCCESS',\r\n    CREATE_USER_FAILDED: 'CREATE_USER_FAILDED',\r\n\r\n    EDIT_USER_SUCCESS: 'EDIT_USER_SUCCESS',\r\n    EDIT_USER_FAILDED: 'EDIT_USER_FAILDED',\r\n\r\n    DELETE_USER_SUCCESS: 'DELETE_USER_SUCCESS',\r\n    DELETE_USER_FAILDED: 'DELETE_USER_FAILDED',\r\n\r\n    FETCH_ALL_USERS_SUCCESS: 'FETCH_ALL_USERS_SUCCESS',\r\n    FETCH_ALL_USERS_FAILDED: 'FETCH_ALL_USERS_FAILDED',\r\n\r\n    FETCH_TOP_DOCTORS_SUCCESS: 'FETCH_TOP_DOCTORS_SUCCESS',\r\n    FETCH_TOP_DOCTORS_FAILDED: 'FETCH_TOP_DOCTORS_FAILDED',\r\n\r\n    FETCH_ALL_DOCTORS_SUCCESS: 'FETCH_ALL_DOCTORS_SUCCESS',\r\n    FETCH_ALL_DOCTORS_FAILDED: 'FETCH_ALL_DOCTORS_FAILDED',\r\n\r\n    SAVE_DETAIL_DOCTOR_SUCCESS: 'SAVE_DETAIL_DOCTOR_SUCCESS',\r\n    SAVE_DETAIL_DOCTOR_FAILDED: 'SAVE_DETAIL_DOCTOR_FAILDED',\r\n\r\n    FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS: 'FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS',\r\n    FETCH_ALLCODE_SCHEDULE_TIME_FAILDED: 'FETCH_ALLCODE_SCHEDULE_TIME_FAILDED',\r\n\r\n    FETCH_REQUIRED_DOCTOR_INFOR_START: 'FETCH_REQUIRED_DOCTOR_INFOR_START',\r\n    FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS: 'FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS',\r\n    FETCH_REQUIRED_DOCTOR_INFOR_FAIDED: 'FETCH_REQUIRED_DOCTOR_INFOR_FAIDED',\r\n})\r\n\r\nexport default actionTypes;","import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        const { data } = response;\r\n        return response.data;\r\n    }\r\n);\r\n\r\nexport default instance;\r\n","import axios from '../axios';\r\nconst handleLoginApi = (userEmail, userPassword) => {\r\n    return axios.post('/api/login', { email: userEmail, password: userPassword });\r\n}\r\n\r\nconst getAllUsers = (inputId) => {\r\n    //template string\r\n    return axios.get(`/api/get-all-users?id=${inputId}`)\r\n}\r\n\r\nconst createNewUserService = (data) => {\r\n    console.log('check data from service : ', data)\r\n    return axios.post('/api/create-new-user', data)\r\n}\r\n\r\nconst deteleUserService = (userId) => {\r\n    // return axios.delete('/api/delete-user', stringt)\r\n    return axios.delete('/api/delete-user', {\r\n        data: {\r\n            id: userId\r\n        }\r\n    });\r\n}\r\n\r\nconst editUserService = (inputData) => {\r\n    return axios.put('/api/edit-user', inputData);\r\n}\r\n\r\nconst getAllCodeService = (inputType) => {\r\n    return axios.get(`/api/allcode?type=${inputType}`)\r\n}\r\n\r\nconst getTopDoctorHomeService = (limit) => {\r\n    return axios.get(`/api/top-doctor-home?limit=${limit}`)\r\n}\r\n\r\nconst getAllDoctors = () => {\r\n    return axios.get(`/api/get-all-doctors`)\r\n}\r\n\r\nconst saveDetailDoctorService = (data) => {\r\n    return axios.post('/api/save-infor-doctors', data)\r\n}\r\n\r\nconst getDetailInforDoctor = (inputId) => {\r\n    return axios.get(`/api/get-detail-doctor-by-id?id=${inputId}`)\r\n}\r\n\r\nconst saveBulkScheduleDoctor = (data) => {\r\n    return axios.post('/api/bulk-create-schedule', data)\r\n}\r\n\r\nconst getScheduleDoctorByDate = (doctorId, date) => {\r\n    return axios.get(`/api/get-schedule-doctor-by-date?doctorId=${doctorId}&date=${date}`)\r\n}\r\n\r\nconst getExtraInforDoctorById = (doctorId) => {\r\n    return axios.get(`/api/get-extra-infor-doctor-by-id?doctorId=${doctorId}`)\r\n}\r\n\r\nconst getProfileDoctorById = (doctorId) => {\r\n    return axios.get(`/api/get-profile-doctor-by-id?doctorId=${doctorId}`)\r\n}\r\n\r\nconst postPatientBookAppointment = (data) => {\r\n    return axios.post('/api/patient-book-appointment', data)\r\n}\r\n\r\nconst postVerifyBookAppointment = (data) => {\r\n    return axios.post('/api/verify-book-appointment', data)\r\n}\r\n\r\nconst createNewSpecialty = (data) => {\r\n    return axios.post('/api/create-new-specialty', data)\r\n}\r\n\r\nconst getAllSpecialty = () => {\r\n    return axios.get(`/api/get-specialty`)\r\n}\r\n\r\nconst getAllClinic = () => {\r\n    return axios.get(`/api/get-clinic`)\r\n}\r\n\r\nconst getAllDetailSpecialtyById = (data) => {\r\n    return axios.get(`/api/get-detail-specialty-by-id?id=${data.id}&location=${data.location}`)\r\n}\r\n\r\nconst getAllDetailClinicById = (data) => {\r\n    return axios.get(`/api/get-detail-clinic-by-id?id=${data.id}`)\r\n}\r\n\r\n\r\n\r\nconst createNewClinic = (data) => {\r\n    return axios.post('/api/create-new-clinic', data)\r\n}\r\n\r\n\r\nconst getAllPatientForDoctor = (data) => {\r\n    return axios.get(`/api/get-list-patient-for-doctor?doctorId=${data.doctorId}&date=${data.date}`)\r\n}\r\n\r\n\r\nconst postSendRemedy = (data) => {\r\n    return axios.post('/api/send-remedy', data)\r\n}\r\nexport {\r\n    handleLoginApi, getAllUsers,\r\n    createNewUserService, deteleUserService,\r\n    editUserService, getAllCodeService, getTopDoctorHomeService,\r\n    getAllDoctors, saveDetailDoctorService,\r\n    getDetailInforDoctor, saveBulkScheduleDoctor,\r\n    getScheduleDoctorByDate, getExtraInforDoctorById,\r\n    getProfileDoctorById, postPatientBookAppointment,\r\n    postVerifyBookAppointment, createNewSpecialty,\r\n    getAllSpecialty, getAllDetailSpecialtyById,\r\n    createNewClinic,\r\n    getAllClinic, getAllDetailClinicById,\r\n    getAllPatientForDoctor, postSendRemedy\r\n}","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from \"../../../utils\";\r\nimport * as actions from \"../../../store/actions\"\r\nimport './UserRedux.scss';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nimport TableManageUser from './TableManageUser';\r\n\r\nclass UserRedux extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            genderArr: [],\r\n            positionArr: [],\r\n            roleArr: [],\r\n            previewImgURL: '',\r\n            isOpen: false,\r\n\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            phoneNumber: '',\r\n            address: '',\r\n            gender: '',\r\n            position: '',\r\n            role: '',\r\n            avatar: '',\r\n\r\n            action: '',\r\n            userEditId: '',\r\n\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenderStart();\r\n        this.props.getPositionStart();\r\n        this.props.getRoleStart();\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        //render => didupdate\r\n        //hiện tại (this) và quá khứ(previous)\r\n        //[]  [3]\r\n        // [3] [3]\r\n        if (prevProps.genderRedux !== this.props.genderRedux) {\r\n            let arrGenders = this.props.genderRedux;\r\n            this.setState({\r\n                genderArr: arrGenders,\r\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.roleRedux !== this.props.roleRedux) {\r\n            let arrRoles = this.props.roleRedux;\r\n            this.setState({\r\n                roleArr: arrRoles,\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : ''\r\n            })\r\n        }\r\n        if (prevProps.positionRedux !== this.props.positionRedux) {\r\n            let arrPositions = this.props.positionRedux;\r\n            this.setState({\r\n                positionArr: arrPositions,\r\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : ''\r\n            })\r\n        }\r\n\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            let arrGenders = this.props.genderRedux;\r\n            let arrRoles = this.props.roleRedux;\r\n            let arrPositions = this.props.positionRedux;\r\n\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                phoneNumber: '',\r\n                address: '',\r\n                gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n                role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n                position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: ''\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64\r\n            })\r\n        }\r\n    }\r\n\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n\r\n        let { action } = this.state;\r\n\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            //fire redux create user\r\n            this.props.createNewUser({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                phonenumber: this.state.phoneNumber,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            //fire redux edit user\r\n            this.props.editAUserRedux({\r\n                id: this.state.userEditId,\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                firstName: this.state.firstName,\r\n                lastName: this.state.lastName,\r\n                address: this.state.address,\r\n                phonenumber: this.state.phoneNumber,\r\n                gender: this.state.gender,\r\n                roleId: this.state.role,\r\n                positionId: this.state.position,\r\n                avatar: this.state.avatar\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['email', 'password', 'firstName', 'lastName',\r\n            'phoneNumber', 'address']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i])\r\n                break;\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        })\r\n    }\r\n\r\n    handleEditUserFromParent = (user) => {\r\n        let imageBase64 = '';\r\n        if (user.image) {\r\n            imageBase64 = Buffer.from(user.image, 'base64').toString('binary');\r\n        }\r\n\r\n\r\n        this.setState({\r\n            email: user.email,\r\n            password: 'HARDCODE',\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            phoneNumber: user.phonenumber,\r\n            address: user.address,\r\n            gender: user.gender,\r\n            role: user.roleId,\r\n            position: user.positionId,\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            userEditId: user.id\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let genders = this.state.genderArr;\r\n        let roles = this.state.roleArr;\r\n        let positions = this.state.positionArr;\r\n        let language = this.props.language;\r\n        let isGetGenders = this.props.isLoadingGender;\r\n\r\n\r\n        let { email, password, firstName, lastName,\r\n            phoneNumber, address, gender, position, role, avatar\r\n        } = this.state;\r\n\r\n\r\n        return (\r\n            <div className=\"user-redux-container\">\r\n                <div className=\"title\">\r\n                    Learn React-Redux với \"Hỏi Dân IT\" youtube Channel\r\n                </div>\r\n                <div className=\"user-redux-body\" >\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 my-3\"><FormattedMessage id=\"manage-user.add\" /> </div>\r\n                            <div className=\"col-12\">{isGetGenders === true ? 'Loading genders' : ''}</div>\r\n\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.email\" /> </label>\r\n                                <input className=\"form-control\" type=\"email\"\r\n                                    value={email}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'email') }}\r\n                                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.password\" /> </label>\r\n                                <input className=\"form-control\" type=\"password\"\r\n                                    value={password}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'password') }}\r\n                                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.first-name\" /></label>\r\n                                <input className=\"form-control\" type=\"text\"\r\n                                    value={firstName}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'firstName') }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.last-name\" /></label>\r\n                                <input className=\"form-control\" type=\"text\"\r\n                                    value={lastName}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'lastName') }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.phone-number\" /></label>\r\n                                <input className=\"form-control\" type=\"text\"\r\n                                    value={phoneNumber}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'phoneNumber') }}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-9\">\r\n                                <label><FormattedMessage id=\"manage-user.address\" /></label>\r\n                                <input className=\"form-control\" type=\"text\"\r\n                                    value={address}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'address') }}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.gender\" /></label>\r\n                                <select className=\"form-control\"\r\n                                    onChange={(event) => { this.onChangeInput(event, 'gender') }}\r\n                                    value={gender}\r\n                                >\r\n                                    {genders && genders.length > 0 &&\r\n                                        genders.map((item, index) => {\r\n                                            return (\r\n                                                <option key={index} value={item.keyMap}>\r\n                                                    {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                                </option>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.position\" /></label>\r\n                                <select className=\"form-control\"\r\n                                    value={position}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'position') }}\r\n                                >\r\n                                    {positions && positions.length > 0\r\n                                        && positions.map((item, index) => {\r\n                                            return (\r\n                                                <option key={index} value={item.keyMap}>\r\n                                                    {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                                </option>\r\n                                            );\r\n                                        })}\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.role\" /></label>\r\n                                <select className=\"form-control\"\r\n                                    onChange={(event) => { this.onChangeInput(event, 'role') }}\r\n                                    value={role}\r\n                                >\r\n                                    {roles && roles.length > 0\r\n                                        && roles.map((item, index) => {\r\n                                            return (\r\n                                                <option key={index} value={item.keyMap}>\r\n                                                    {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                                </option>\r\n                                            );\r\n                                        })}\r\n\r\n                                </select>\r\n                            </div>\r\n\r\n                            <div className=\"col-3\">\r\n                                <label><FormattedMessage id=\"manage-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnchangeImage(event)}\r\n\r\n                                    />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Tải ảnh <i className=\"fas fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\"\r\n                                        style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"col-12 my-3\">\r\n                                <button\r\n                                    className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn  btn-warning\" : \"btn btn-primary\"}\r\n                                    onClick={() => this.handleSaveUser()}\r\n                                >\r\n                                    {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                        <FormattedMessage id=\"manage-user.edit\" />\r\n                                        :\r\n                                        <FormattedMessage id=\"manage-user.save\" />\r\n                                    }\r\n                                </button>\r\n                            </div>\r\n\r\n                            <div className=\"col-12 mb-5\">\r\n                                <TableManageUser\r\n                                    handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                                    action={this.state.action}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genderRedux: state.admin.genders,\r\n        roleRedux: state.admin.roles,\r\n        positionRedux: state.admin.positions,\r\n        isLoadingGender: state.admin.isLoadingGender,\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n        getPositionStart: () => dispatch(actions.fetchPositionStart()),\r\n        getRoleStart: () => dispatch(actions.fetchRoleStart()),\r\n        createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        editAUserRedux: (data) => dispatch(actions.editAUser(data))\r\n\r\n        // processLogout: () => dispatch(actions.processLogout()),\r\n        // changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../../store/actions\"\r\n\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\n// import style manually\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\n\r\n// Register plugins if required\r\n// MdEditor.use(YOUR_PLUGINS_HERE);\r\n\r\n// Initialize a markdown parser\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\n// Finish!\r\nfunction handleEditorChange({ html, text }) {\r\n    console.log('handleEditorChange', html, text);\r\n}\r\n\r\nclass TableManageUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersRedux: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUserRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            this.setState({\r\n                usersRedux: this.props.listUsers\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDeleteUser = (user) => {\r\n        this.props.deleteAUserRedux(user.id);\r\n    }\r\n    handleEditUser = (user) => {\r\n        this.props.handleEditUserFromParentKey(user)\r\n    }\r\n    render() {\r\n        let arrUsers = this.state.usersRedux;\r\n        return (\r\n            <React.Fragment>\r\n                <table id=\"TableManageUser\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <th>Email</th>\r\n                            <th>First name</th>\r\n                            <th>Last name</th>\r\n                            <th>Address</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        {arrUsers && arrUsers.length > 0 &&\r\n                            arrUsers.map((item, index) => {\r\n                                return (\r\n                                    <tr key={index} >\r\n                                        <td>{item.email}</td>\r\n                                        <td>{item.firstName}</td>\r\n                                        <td>{item.lastName}</td>\r\n                                        <td>{item.address}</td>\r\n                                        <td>\r\n                                            <button\r\n                                                onClick={() => this.handleEditUser(item)}\r\n                                                className=\"btn-edit\" ><i className=\"fas fa-pencil-alt\"></i></button>\r\n                                            <button\r\n                                                onClick={() => this.handleDeleteUser(item)}\r\n                                                className=\"btn-delete\" ><i className=\"fas fa-trash\"></i></button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </tbody>\r\n                </table>\r\n\r\n                <MdEditor style={{ height: '500px' }} renderHTML={text => mdParser.render(text)} onChange={handleEditorChange} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        deleteAUserRedux: (id) => dispatch(actions.deleteAUser(id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from \"react-slick\";\r\nimport * as actions from '../../../store/actions';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass OutStandingDoctor extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            arrDoctors: []\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.topDoctorsRedux !== this.props.topDoctorsRedux) {\r\n            this.setState({\r\n                arrDoctors: this.props.topDoctorsRedux\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadTopDoctors();\r\n    }\r\n\r\n    handleViewDetailDoctor = (doctor) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-doctor/${doctor.id}`)\r\n        }\r\n    }\r\n    render() {\r\n        let arrDoctors = this.state.arrDoctors;\r\n        let { language } = this.props;\r\n        // arrDoctors = arrDoctors.concat(arrDoctors).concat(arrDoctors)\r\n        return (\r\n            <div className=\"section-share section-outstanding-doctor\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">\r\n                            <FormattedMessage id=\"homepage.outstanding-doctor\" />\r\n                        </span>\r\n                        <button className=\"btn-section\">\r\n                            <FormattedMessage id=\"homepage.more-infor\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {arrDoctors && arrDoctors.length > 0\r\n                                && arrDoctors.map((item, index) => {\r\n                                    let imageBase64 = '';\r\n                                    if (item.image) {\r\n                                        imageBase64 = Buffer.from(item.image, 'base64').toString('binary');\r\n                                    }\r\n                                    let nameVi = `${item.positionData.valueVi}, ${item.lastName} ${item.firstName} `;\r\n                                    let nameEn = `${item.positionData.valueEn}, ${item.firstName} ${item.lastName}`;\r\n                                    return (\r\n                                        <div className=\"section-customize\" key={index} onClick={() => this.handleViewDetailDoctor(item)}>\r\n                                            <div className=\"customize-border\">\r\n                                                <div className=\"outer-bg\">\r\n                                                    <div className=\"bg-image section-outstading-doctor\"\r\n                                                        style={{ backgroundImage: `url(${imageBase64})` }}\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"position text-center\">\r\n                                                    <div>{language === LANGUAGES.VI ? nameVi : nameEn}</div>\r\n                                                    <div>Cơ Xương Khớp</div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        topDoctorsRedux: state.admin.topDoctors\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        loadTopDoctors: () => dispatch(actions.fetchTopDoctor())\r\n\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(OutStandingDoctor));\r\n","import actionTypes from './actionTypes';\r\n\r\nexport const appStartUpComplete = () => ({\r\n    type: actionTypes.APP_START_UP_COMPLETE\r\n});\r\n\r\nexport const setContentOfConfirmModal = (contentOfConfirmModal) => ({\r\n    type: actionTypes.SET_CONTENT_OF_CONFIRM_MODAL,\r\n    contentOfConfirmModal: contentOfConfirmModal\r\n});\r\n\r\n\r\nexport const changeLanguageApp = (languageInput) => ({\r\n    type: actionTypes.CHANGE_LANGUAGE,\r\n    language: languageInput\r\n})","import actionTypes from './actionTypes';\r\n\r\nexport const addUserSuccess = () => ({\r\n    type: actionTypes.ADD_USER_SUCCESS\r\n})\r\n\r\nexport const userLoginSuccess = (userInfo) => ({\r\n    type: actionTypes.USER_LOGIN_SUCCESS,\r\n    userInfo: userInfo\r\n})\r\n\r\nexport const userLoginFail = () => ({\r\n    type: actionTypes.USER_LOGIN_FAIL\r\n})\r\n\r\nexport const processLogout = () => ({\r\n    type: actionTypes.PROCESS_LOGOUT\r\n})","import actionTypes from './actionTypes';\r\nimport {\r\n    getAllCodeService, createNewUserService, getAllUsers,\r\n    deteleUserService, editUserService, getTopDoctorHomeService,\r\n    getAllDoctors, saveDetailDoctorService,\r\n    getAllSpecialty, getAllClinic\r\n} from \"../../services/userService\";\r\nimport { toast } from \"react-toastify\";\r\n// export const fetchGenderStart = () => ({\r\n//     type: actionTypes.FETCH_GENDER_START\r\n// })\r\n\r\nexport const fetchGenderStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_GENDER_START })\r\n\r\n            let res = await getAllCodeService(\"GENDER\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchGenderSuccess(res.data))\r\n            } else {\r\n                dispatch(fetchGenderFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchGenderFailed());\r\n            console.log('fetchGenderStart error', e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const fetchGenderSuccess = (genderData) => ({\r\n    type: actionTypes.FETCH_GENDER_SUCCESS,\r\n    data: genderData\r\n})\r\n\r\nexport const fetchGenderFailed = () => ({\r\n    type: actionTypes.FETCH_GENDER_FAIDED\r\n})\r\n\r\nexport const fetchPositionSuccess = (positionData) => ({\r\n    type: actionTypes.FETCH_POSITION_SUCCESS,\r\n    data: positionData\r\n})\r\n\r\nexport const fetchPositionFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAIlDED\r\n})\r\n\r\n\r\nexport const fetchRoleSuccess = (roleData) => ({\r\n    type: actionTypes.FETCH_ROLE_SUCCESS,\r\n    data: roleData\r\n})\r\n\r\nexport const fetchRoleFailed = () => ({\r\n    type: actionTypes.FETCH_POSITION_FAIlDED\r\n})\r\n\r\n\r\nexport const fetchPositionStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"POSITION\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchPositionSuccess(res.data))\r\n            } else {\r\n                dispatch(fetchPositionFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchPositionFailed());\r\n            console.log('fetchPositionFailed error', e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const fetchRoleStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"ROLE\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchRoleSuccess(res.data))\r\n            } else {\r\n                dispatch(fetchRoleFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRoleFailed());\r\n            console.log('fetchRoleFailed error', e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const createNewUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await createNewUserService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Create a new user succeed!\");\r\n                dispatch(saveUserSuccess())\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                dispatch(saveUserFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(saveUserFailed());\r\n            console.log('saveUserFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveUserSuccess = () => ({\r\n    type: actionTypes.CREATE_USER_SUCCESS\r\n})\r\n\r\nexport const saveUserFailed = () => ({\r\n    type: actionTypes.CREATE_USER_FAILDED\r\n})\r\n\r\n\r\nexport const fetchAllUsersStart = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllUsers(\"ALL\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch(fetchAllUsersSuccess(res.users.reverse()))\r\n            } else {\r\n                toast.error(\"Fetch all users error!\");\r\n                dispatch(fetchAllUsersFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error(\"Fetch all users error!\");\r\n\r\n            dispatch(fetchAllUsersFailed());\r\n            console.log('fetchAllUsersFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllUsersSuccess = (data) => ({\r\n    type: actionTypes.FETCH_ALL_USERS_SUCCESS,\r\n    users: data\r\n})\r\n\r\nexport const fetchAllUsersFailed = () => ({\r\n    type: actionTypes.FETCH_ALL_USERS_FAILDED,\r\n})\r\n\r\n\r\nexport const deleteAUser = (userId) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await deteleUserService(userId);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Delete the user succeed!\");\r\n                dispatch(deleteUserSuccess())\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(\"Delete the user error!\");\r\n                dispatch(deleteUserFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error(\"Delete the user error!\");\r\n            dispatch(deleteUserFailed());\r\n            console.log('saveUserFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUserSuccess = () => ({\r\n    type: actionTypes.DELETE_USER_SUCCESS\r\n})\r\n\r\nexport const deleteUserFailed = () => ({\r\n    type: actionTypes.DELETE_USER_FAILDED\r\n})\r\n\r\nexport const editAUser = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await editUserService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Update the user succeed!\");\r\n                dispatch(editUserSuccess())\r\n                dispatch(fetchAllUsersStart());\r\n            } else {\r\n                toast.error(\"Update the user error!\");\r\n                dispatch(editUserFailed());\r\n            }\r\n        } catch (e) {\r\n            toast.error(\"Update the user error!\");\r\n            dispatch(editUserFailed());\r\n            console.log('EditUserFailed error', e)\r\n        }\r\n    }\r\n}\r\n\r\nexport const editUserSuccess = () => ({\r\n    type: actionTypes.EDIT_USER_SUCCESS\r\n})\r\n\r\nexport const editUserFailed = () => ({\r\n    type: actionTypes.EDIT_USER_FAILDED\r\n})\r\n\r\nexport const fetchTopDoctor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getTopDoctorHomeService('');\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_SUCCESS,\r\n                    dataDoctors: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_TOP_DOCTORS_FAILDED\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log('FETCH_TOP_DOCTORS_FAILDED: ', e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_TOP_DOCTORS_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const fetchAllDoctors = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllDoctors();\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_SUCCESS,\r\n                    dataDr: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALL_DOCTORS_FAILDED\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log('FETCH_ALL_DOCTORS_FAILDED: ', e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALL_DOCTORS_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const saveDetailDoctor = (data) => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await saveDetailDoctorService(data);\r\n            if (res && res.errCode === 0) {\r\n                toast.success(\"Save Infor Detail Doctor succeed!\");\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_SUCCESS,\r\n                })\r\n            } else {\r\n                console.log('err res', res)\r\n                toast.error(\"Save Infor Detail Doctor error!\");\r\n                dispatch({\r\n                    type: actionTypes.SAVE_DETAIL_DOCTOR_FAILDED\r\n                })\r\n            }\r\n        } catch (e) {\r\n            toast.error(\"Save Infor Detail Doctor error!\");\r\n\r\n            console.log('SAVE_DETAIL_DOCTOR_FAILDED: ', e)\r\n            dispatch({\r\n                type: actionTypes.SAVE_DETAIL_DOCTOR_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const fetchAllScheduleTime = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            let res = await getAllCodeService(\"TIME\");\r\n            if (res && res.errCode === 0) {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS,\r\n                    dataTime: res.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\r\n                })\r\n            }\r\n        } catch (e) {\r\n            console.log('FETCH_ALLCODE_SCHEDULE_TIME_FAILDED: ', e)\r\n            dispatch({\r\n                type: actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const getRequiredDoctorInfor = () => {\r\n    return async (dispatch, getState) => {\r\n        try {\r\n            dispatch({ type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_START })\r\n\r\n            let resPrice = await getAllCodeService(\"PRICE\");\r\n            let resPayment = await getAllCodeService(\"PAYMENT\");\r\n            let resProvince = await getAllCodeService(\"PROVINCE\");\r\n            let resSpecialty = await getAllSpecialty();\r\n            let resClinic = await getAllClinic();\r\n\r\n            if (resPrice && resPrice.errCode === 0\r\n                && resPayment && resPayment.errCode === 0\r\n                && resProvince && resProvince.errCode === 0\r\n                && resSpecialty && resSpecialty.errCode === 0\r\n                && resClinic && resClinic.errCode === 0\r\n            ) {\r\n                let data = {\r\n                    resPrice: resPrice.data,\r\n                    resPayment: resPayment.data,\r\n                    resProvince: resProvince.data,\r\n                    resSpecialty: resSpecialty.data,\r\n                    resClinic: resClinic.data\r\n                }\r\n                dispatch(fetchRequiredDoctorInforSuccess(data))\r\n            } else {\r\n                dispatch(fetchRequiredDoctorInforFailed());\r\n            }\r\n        } catch (e) {\r\n            dispatch(fetchRequiredDoctorInforFailed());\r\n            console.log('fetchGenderStart error', e)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const fetchRequiredDoctorInforSuccess = (allRequiredData) => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS,\r\n    data: allRequiredData\r\n})\r\n\r\nexport const fetchRequiredDoctorInforFailed = () => ({\r\n    type: actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAIDED\r\n})\r\n","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initContentOfConfirmModal = {\r\n    isOpen: false,\r\n    messageId: \"\",\r\n    handleFunc: null,\r\n    dataFunc: null\r\n}\r\n\r\nconst initialState = {\r\n    started: true,\r\n    language: 'vi',\r\n    systemMenuPath: '/system/user-manage',\r\n    contentOfConfirmModal: {\r\n        ...initContentOfConfirmModal\r\n    }\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.APP_START_UP_COMPLETE:\r\n            return {\r\n                ...state,\r\n                started: true\r\n            }\r\n        case actionTypes.SET_CONTENT_OF_CONFIRM_MODAL:\r\n            return {\r\n                ...state,\r\n                contentOfConfirmModal: {\r\n                    ...state.contentOfConfirmModal,\r\n                    ...action.contentOfConfirmModal\r\n                }\r\n            }\r\n\r\n        case actionTypes.CHANGE_LANGUAGE:\r\n            console.log('hoidanit check redux :', action)\r\n            return {\r\n                ...state,\r\n                language: action.language,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    userInfo: null\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.USER_LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                userInfo: action.userInfo\r\n            }\r\n        case actionTypes.USER_LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                userInfo: null\r\n            }\r\n        case actionTypes.PROCESS_LOGOUT:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                userInfo: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default appReducer;","import actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isLoadingGender: false,\r\n    genders: [],\r\n    roles: [],\r\n    positions: [],\r\n    users: [],\r\n    topDoctors: [],\r\n    allDoctors: [],\r\n    allScheduleTime: [],\r\n\r\n    allRequiredDoctorInfor: [],\r\n}\r\n\r\nconst adminReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_GENDER_START:\r\n            let copyState = { ...state };\r\n            copyState.isLoadingGender = true;\r\n            return {\r\n                ...copyState\r\n            }\r\n\r\n        case actionTypes.FETCH_GENDER_SUCCESS:\r\n            state.genders = action.data;\r\n            state.isLoadingGender = false;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_GENDER_FAIDED:\r\n            state.isLoadingGender = false;\r\n            state.genders = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_POSITION_SUCCESS:\r\n            state.positions = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_POSITION_FAIlDED:\r\n            state.positions = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n\r\n        case actionTypes.FETCH_ROLE_SUCCESS:\r\n            state.roles = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ROLE_FAILDED:\r\n            state.roles = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ALL_USERS_SUCCESS:\r\n            state.users = action.users;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ALL_USERS_FAILDED:\r\n            state.users = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_TOP_DOCTORS_SUCCESS:\r\n            state.topDoctors = action.dataDoctors;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_TOP_DOCTORS_FAILDED:\r\n            state.topDoctors = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ALL_DOCTORS_SUCCESS:\r\n            state.allDoctors = action.dataDr;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ALL_DOCTORS_FAILDED:\r\n            state.allDoctors = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_SUCCESS:\r\n            state.allScheduleTime = action.dataTime;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_ALLCODE_SCHEDULE_TIME_FAILDED:\r\n            state.allScheduleTime = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_SUCCESS:\r\n            state.allRequiredDoctorInfor = action.data;\r\n            return {\r\n                ...state\r\n            }\r\n\r\n        case actionTypes.FETCH_REQUIRED_DOCTOR_INFOR_FAIDED:\r\n            state.allRequiredDoctorInfor = [];\r\n            return {\r\n                ...state\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default adminReducer;","import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\nimport appReducer from \"./appReducer\";\r\nimport userReducer from \"./userReducer\";\r\nimport adminReducer from './adminReducer';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo']\r\n};\r\n\r\nconst appPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language']\r\n}\r\n\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer\r\n})","import { logger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { createStateSyncMiddleware } from 'redux-state-sync';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nimport createRootReducer from './store/reducers/rootReducer';\r\nimport actionTypes from './store/actions/actionTypes';\r\n\r\nconst environment = process.env.NODE_ENV || \"development\";\r\nlet isDevelopment = environment === \"development\";\r\n\r\n//hide redux logs\r\nisDevelopment = false;\r\n\r\n\r\nexport const history = createBrowserHistory({ basename: process.env.REACT_APP_ROUTER_BASE_NAME });\r\n\r\nconst reduxStateSyncConfig = {\r\n    whitelist: [\r\n        actionTypes.APP_START_UP_COMPLETE,\r\n        actionTypes.CHANGE_LANGUAGE\r\n    ]\r\n}\r\n\r\nconst rootReducer = createRootReducer(history);\r\nconst middleware = [\r\n    routerMiddleware(history),\r\n    thunkMiddleware,\r\n    createStateSyncMiddleware(reduxStateSyncConfig),\r\n]\r\nif (isDevelopment) middleware.push(logger);\r\n\r\nconst composeEnhancers = (isDevelopment && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\r\n\r\nconst reduxStore = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware)),\r\n)\r\n\r\nexport const dispatch = reduxStore.dispatch;\r\n\r\nexport const persistor = persistStore(reduxStore);\r\n\r\nexport default reduxStore;","import locationHelperBuilder from \"redux-auth-wrapper/history4/locationHelper\";\r\nimport { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\r\n\r\nconst locationHelper = locationHelperBuilder({});\r\n\r\nexport const userIsAuthenticated = connectedRouterRedirect({\r\n    authenticatedSelector: state => state.user.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsAuthenticated',\r\n    redirectPath: '/login'\r\n});\r\n\r\nexport const userIsNotAuthenticated = connectedRouterRedirect({\r\n    // Want to redirect the user when they are authenticated\r\n    authenticatedSelector: state => !state.user.isLoggedIn,\r\n    wrapperDisplayName: 'UserIsNotAuthenticated',\r\n    redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || '/',\r\n    allowRedirectBack: false\r\n});","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n        let linkToRedirect = isLoggedIn ? '/system/user-manage' : '/home';\r\n        return (\r\n            <Redirect to={linkToRedirect} />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\nimport * as actions from \"../../store/actions\";\r\n\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { handleLoginApi } from '../../services/userService';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            isShowPassword: false,\r\n            errMessage: ''\r\n        }\r\n    }\r\n\r\n    handleOnChangeUsername = (event) => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnChangePassword = (event) => {\r\n        this.setState({\r\n            password: event.target.value\r\n        })\r\n    }\r\n\r\n    handleLogin = async () => {\r\n        this.setState({\r\n            errMessage: ''\r\n        })\r\n\r\n        try {\r\n            let data = await handleLoginApi(this.state.username, this.state.password);\r\n            if (data && data.errCode !== 0) {\r\n                this.setState({\r\n                    errMessage: data.message\r\n                })\r\n            }\r\n            if (data && data.errCode === 0) {\r\n                this.props.userLoginSuccess(data.user)\r\n            }\r\n        } catch (error) {\r\n            if (error.response) {\r\n                if (error.response.data) {\r\n                    this.setState({\r\n                        errMessage: error.response.data.message\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleShowHidePassword = () => {\r\n        this.setState({\r\n            isShowPassword: !this.state.isShowPassword\r\n        })\r\n    }\r\n\r\n    handleKeyDown = (event) => {\r\n        if (event.key === 'Enter' || event.keyCode === 13) {\r\n            this.handleLogin();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //JSX\r\n        return (\r\n            <div className=\"login-background\">\r\n                <div className=\"login-container\">\r\n                    <div className=\"login-content row\">\r\n                        <div className=\"col-12 text-login\">Login</div>\r\n                        <div className=\"col-12 form-group login-input\">\r\n                            <label>Username:</label>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Enter your username\"\r\n                                value={this.state.username}\r\n                                onChange={(event) => this.handleOnChangeUsername(event)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 form-group login-input\">\r\n                            <label>Password:</label>\r\n                            <div className=\"custom-input-password\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type={this.state.isShowPassword ? 'text' : 'password'}\r\n                                    placeholder=\"Enter your password\"\r\n                                    onChange={(event) => { this.handleOnChangePassword(event) }}\r\n                                    onKeyDown={(event) => this.handleKeyDown(event)}\r\n                                />\r\n                                <span\r\n                                    onClick={() => { this.handleShowHidePassword() }}\r\n\r\n                                ><i className={this.state.isShowPassword ? 'far fa-eye' : 'far fa-eye-slash'}></i></span>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-12' style={{ color: 'red' }}>\r\n                            {this.state.errMessage}\r\n                        </div>\r\n                        <div className=\"col-12 \">\r\n                            <button className=\"btn-login\" onClick={() => { this.handleLogin() }}>Login</button>\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <span className=\"forgot-password\">Forgot your password?</span>\r\n                        </div>\r\n                        <div className=\"col-12 text-center mt-3\">\r\n                            <span className=\"text-other-login\">Or Login with:</span>\r\n                        </div>\r\n                        <div className=\"col-12 social-login\">\r\n                            <i className=\"fab fa-google-plus-g google\"></i>\r\n                            <i className=\"fab fa-facebook-f facebook\"></i>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        navigate: (path) => dispatch(push(path)),\r\n        // userLoginFail: () => dispatch(actions.adminLoginFail()),\r\n        userLoginSuccess: (userInfor) => dispatch(actions.userLoginSuccess(userInfor))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import EventEmitter from 'events';\r\n\r\nconst _emitter = new EventEmitter();\r\n_emitter.setMaxListeners(0); // unlimit listener\r\n\r\nexport const emitter = _emitter;\r\n","\r\nimport React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { emitter } from \"../../utils/emitter\";\r\n\r\nclass ModalUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: ''\r\n        }\r\n\r\n        this.listenToEmitter();\r\n    }\r\n\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            //reset state\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: '',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n\r\n    handleOnChageInput = (event, id) => {\r\n        //bad code.modify state\r\n        /**\r\n         * this.state = {\r\n         * email: '',\r\n         * password: '\r\n         * \r\n         * }\r\n         * this.state.email === this.state['email']\r\n         * \r\n         */\r\n        // this.state[id] = event.target.value;\r\n        // this.setState({\r\n        //     ...this.state\r\n        // }, () => {\r\n        //     console.log('check bad state: ', this.state)\r\n        // })\r\n\r\n\r\n        //good code\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //call api create modal\r\n            this.props.createNewuser(this.state, 'abc');\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>Create a new user</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container\">\r\n                            <label>Email</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"email\") }}\r\n                                value={this.state.email}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>First name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>Last name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"address\") }}\r\n                                value={this.state.address}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        className=\"px-3\"\r\n                        onClick={() => { this.handleAddNewUser() }}\r\n                    >Add new</Button>{' '}\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalUser);\r\n\r\n\r\n\r\n","\r\nimport React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { emitter } from \"../../utils/emitter\";\r\nimport _ from 'lodash';\r\n\r\nclass ModalEditUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            address: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = this.props.currentUser; //{}\r\n        // let { currentUser } = this.props;\r\n        if (user && !_.isEmpty(user)) {\r\n            this.setState({\r\n                id: user.id,\r\n                email: user.email,\r\n                password: 'harcode',\r\n                firstName: user.firstName,\r\n                lastName: user.lastName,\r\n                address: user.address\r\n\r\n            })\r\n        }\r\n        console.log('didmout edit modal ', this.props.currentUser)\r\n    }\r\n\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n\r\n    handleOnChageInput = (event, id) => {\r\n        //good code\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //call api edit user modal\r\n            this.props.editUser(this.state);\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\"\r\n            >\r\n                <ModalHeader toggle={() => { this.toggle() }}>Edit a new user</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container\">\r\n                            <label>Email</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"email\") }}\r\n                                value={this.state.email}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>First name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container\">\r\n                            <label>Last name</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}\r\n                            />\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                onChange={(event) => { this.handleOnChageInput(event, \"address\") }}\r\n                                value={this.state.address}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        className=\"px-3\"\r\n                        onClick={() => { this.handleSaveUser() }}\r\n                    >Save changes</Button>{' '}\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Close</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport { getAllUsers, createNewUserService, deteleUserService, editUserService } from '../../services/userService';\r\nimport ModalUser from './ModalUser';\r\nimport ModalEditUser from './ModalEditUser';\r\nimport { emitter } from \"../../utils/emitter\";\r\n\r\nclass UserManage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrUsers: [],\r\n            isOpenModalUser: false,\r\n            isOpenModalEditUser: false,\r\n            userEdit: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.getAllUsersFromReact();\r\n    }\r\n\r\n    getAllUsersFromReact = async () => {\r\n        let response = await getAllUsers('ALL');\r\n        if (response && response.errCode === 0) {\r\n            this.setState({\r\n                arrUsers: response.users\r\n            })\r\n        }\r\n    }\r\n\r\n    handleAddNewUser = () => {\r\n        this.setState({\r\n            isOpenModalUser: true,\r\n        })\r\n    }\r\n\r\n    toggleUserModal = () => {\r\n        this.setState({\r\n            isOpenModalUser: !this.state.isOpenModalUser,\r\n        })\r\n    }\r\n\r\n    toggleUserEditModal = () => {\r\n        this.setState({\r\n            isOpenModalEditUser: !this.state.isOpenModalEditUser,\r\n        })\r\n    }\r\n\r\n    createNewuser = async (data) => {\r\n        try {\r\n            let response = await createNewUserService(data);\r\n            if (response && response.errCode !== 0) {\r\n                alert(response.errMessage)\r\n            } else {\r\n                await this.getAllUsersFromReact();\r\n                this.setState({\r\n                    isOpenModalUser: false\r\n                })\r\n\r\n                emitter.emit('EVENT_CLEAR_MODAL_DATA')\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    handleDeleteUser = async (user) => {\r\n        try {\r\n            let res = await deteleUserService(user.id);\r\n            if (res && res.errCode === 0) {\r\n                await this.getAllUsersFromReact();\r\n            }\r\n            else {\r\n                alert(res.errMessage)\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    handleEditUser = (user) => {\r\n        console.log('check edit user ', user);\r\n        this.setState({\r\n            isOpenModalEditUser: true,\r\n            userEdit: user\r\n        })\r\n    }\r\n\r\n    doEditUser = async (user) => {\r\n        try {\r\n            let res = await editUserService(user);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    isOpenModalEditUser: false\r\n                })\r\n\r\n                await this.getAllUsersFromReact()\r\n            } else {\r\n                alert(res.errCode)\r\n            }\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    /** Life cycle\r\n     *  Run component: \r\n     * 1. Run construct -> init state\r\n     * 2. Did mount (set state) : born ; unmount\r\n     * 3. Render (re-render)\r\n     * \r\n     */\r\n    render() {\r\n        let arrUsers = this.state.arrUsers;\r\n        console.log(arrUsers)\r\n        //properties ; nested\r\n        return (\r\n            <div className=\"users-container\">\r\n                <ModalUser\r\n                    isOpen={this.state.isOpenModalUser}\r\n                    toggleFromParent={this.toggleUserModal}\r\n                    createNewuser={this.createNewuser}\r\n\r\n                />\r\n                {\r\n                    this.state.isOpenModalEditUser &&\r\n                    <ModalEditUser\r\n                        isOpen={this.state.isOpenModalEditUser}\r\n                        toggleFromParent={this.toggleUserEditModal}\r\n                        currentUser={this.state.userEdit}\r\n                        editUser={this.doEditUser}\r\n                    />\r\n                }\r\n                <div className=\"title text-center\">Manage users with Eric</div>\r\n                <div className=\"mx-1\">\r\n                    <button\r\n                        className=\"btn btn-primary px-3\"\r\n                        onClick={() => this.handleAddNewUser()}\r\n                    ><i className=\"fas fa-plus\"></i> Add new users</button>\r\n                </div>\r\n                <div className=\"users-table mt-3 mx-1\">\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Email</th>\r\n                                <th>First name</th>\r\n                                <th>Last name</th>\r\n                                <th>Address</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n\r\n                            {arrUsers && arrUsers.map((item, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{item.email}</td>\r\n                                        <td>{item.firstName}</td>\r\n                                        <td>{item.lastName}</td>\r\n                                        <td>{item.address}</td>\r\n                                        <td>\r\n                                            <button className=\"btn-edit\" onClick={() => this.handleEditUser(item)}><i className=\"fas fa-pencil-alt\"></i></button>\r\n                                            <button className=\"btn-delete\" onClick={() => this.handleDeleteUser(item)}><i className=\"fas fa-trash\"></i></button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                            }\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Navigator.scss';\r\n\r\nclass MenuGroup extends Component {\r\n\r\n    render() {\r\n        const { name, children } = this.props;\r\n        return (\r\n            <li className=\"menu-group\">\r\n                <div className=\"menu-group-name\">\r\n                    <FormattedMessage id={name} />\r\n                </div>\r\n                <ul className=\"menu-list list-unstyled\">\r\n                    {children}\r\n                </ul>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass Menu extends Component {\r\n\r\n    render() {\r\n        const { name, active, link, children, onClick, hasSubMenu, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"menu\" + (hasSubMenu ? \" has-sub-menu\" : \"\") + (\"\") + (active ? \" active\" : \"\")}>\r\n                {hasSubMenu ? (\r\n                    <Fragment>\r\n                        <span\r\n                            data-toggle=\"collapse\"\r\n                            className={\"menu-link collapsed\"}\r\n                            onClick={onClick}\r\n                            aria-expanded={\"false\"}\r\n                        >\r\n                            <FormattedMessage id={name} />\r\n                            <div className=\"icon-right\">\r\n                                <i className={\"far fa-angle-right\"} />\r\n                            </div>\r\n                        </span>\r\n                        <div>\r\n                            <ul className=\"sub-menu-list list-unstyled\">\r\n                                {children}\r\n                            </ul>\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                        <Link to={link} className=\"menu-link\" onClick={onLinkClick}>\r\n                            <FormattedMessage id={name} />\r\n                        </Link>\r\n                    )}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nclass SubMenu extends Component {\r\n\r\n    getItemClass = path => {\r\n        return this.props.location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    render() {\r\n        const { name, link, onLinkClick } = this.props;\r\n        return (\r\n            <li className={\"sub-menu \" + this.getItemClass(link)}>\r\n                <Link to={link} className=\"sub-menu-link\" onClick={onLinkClick}>\r\n                    <FormattedMessage id={name} />\r\n                </Link>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nconst MenuGroupWithRouter = withRouter(MenuGroup);\r\nconst MenuWithRouter = withRouter(Menu);\r\nconst SubMenuWithRouter = withRouter(SubMenu);\r\n\r\nconst withRouterInnerRef = (WrappedComponent) => {\r\n\r\n    class InnerComponentWithRef extends React.Component {\r\n        render() {\r\n            const { forwardRef, ...rest } = this.props;\r\n            return <WrappedComponent {...rest} ref={forwardRef} />;\r\n        }\r\n    }\r\n\r\n    const ComponentWithRef = withRouter(InnerComponentWithRef, { withRef: true });\r\n\r\n    return React.forwardRef((props, ref) => {\r\n        return <ComponentWithRef {...props} forwardRef={ref} />;\r\n    });\r\n};\r\n\r\nclass Navigator extends Component {\r\n    state = {\r\n        expandedMenu: {}\r\n    };\r\n\r\n    toggle = (groupIndex, menuIndex) => {\r\n        const expandedMenu = {};\r\n        const needExpand = !(this.state.expandedMenu[groupIndex + '_' + menuIndex] === true);\r\n        if (needExpand) {\r\n            expandedMenu[groupIndex + '_' + menuIndex] = true;\r\n        }\r\n\r\n        this.setState({\r\n            expandedMenu: expandedMenu\r\n        });\r\n    };\r\n\r\n    isMenuHasSubMenuActive = (location, subMenus, link) => {\r\n        if (subMenus) {\r\n            if (subMenus.length === 0) {\r\n                return false;\r\n            }\r\n\r\n            const currentPath = location.pathname;\r\n            for (let i = 0; i < subMenus.length; i++) {\r\n                const subMenu = subMenus[i];\r\n                if (subMenu.link === currentPath) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (link) {\r\n            return this.props.location.pathname === link;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    checkActiveMenu = () => {\r\n        const { menus, location } = this.props;\r\n        outerLoop:\r\n        for (let i = 0; i < menus.length; i++) {\r\n            const group = menus[i];\r\n            if (group.menus && group.menus.length > 0) {\r\n                for (let j = 0; j < group.menus.length; j++) {\r\n                    const menu = group.menus[j];\r\n                    if (menu.subMenus && menu.subMenus.length > 0) {\r\n                        if (this.isMenuHasSubMenuActive(location, menu.subMenus, null)) {\r\n                            const key = i + '_' + j;\r\n                            this.setState({\r\n                                expandedMenu: {\r\n                                    [key]: true\r\n                                }\r\n                            });\r\n                            break outerLoop;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.checkActiveMenu();\r\n    };\r\n\r\n    // componentWillReceiveProps(nextProps, prevState) {\r\n    //     const { location, setAccountMenuPath, setSettingMenuPath } = this.props;\r\n    //     const { location: nextLocation } = nextProps;\r\n    //     if (location !== nextLocation) {\r\n    //         let pathname = nextLocation && nextLocation.pathname;\r\n    //         if ((pathname.startsWith('/account/') || pathname.startsWith('/fds/account/'))) {\r\n    //             setAccountMenuPath(pathname);\r\n    //         }\r\n    //         if (pathname.startsWith('/settings/')) {\r\n    //             setSettingMenuPath(pathname);\r\n    //         };\r\n    //     };\r\n    // };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { location } = this.props;\r\n        const { location: prevLocation } = prevProps;\r\n        if (location !== prevLocation) {\r\n            this.checkActiveMenu();\r\n        };\r\n    };\r\n\r\n    render() {\r\n        const { menus, location, onLinkClick } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <ul className=\"navigator-menu list-unstyled\">\r\n                    {\r\n                        menus.map((group, groupIndex) => {\r\n                            return (\r\n                                <Fragment key={groupIndex}>\r\n                                    <MenuGroupWithRouter name={group.name}>\r\n                                        {group.menus ? (\r\n                                            group.menus.map((menu, menuIndex) => {\r\n                                                const isMenuHasSubMenuActive = this.isMenuHasSubMenuActive(location, menu.subMenus, menu.link);\r\n                                                const isSubMenuOpen = this.state.expandedMenu[groupIndex + '_' + menuIndex] === true;\r\n                                                return (\r\n                                                    <MenuWithRouter\r\n                                                        key={menuIndex}\r\n                                                        active={isMenuHasSubMenuActive}\r\n                                                        name={menu.name}\r\n                                                        link={menu.link}\r\n                                                        hasSubMenu={menu.subMenus}\r\n                                                        isOpen={isSubMenuOpen}\r\n                                                        onClick={() => this.toggle(groupIndex, menuIndex)}\r\n                                                        onLinkClick={onLinkClick}\r\n                                                    >\r\n                                                        {menu.subMenus && menu.subMenus.map((subMenu, subMenuIndex) => (\r\n                                                            <SubMenuWithRouter\r\n                                                                key={subMenuIndex}\r\n                                                                name={subMenu.name}\r\n                                                                link={subMenu.link}\r\n                                                                onClick={this.closeOtherExpand}\r\n                                                                onLinkClick={onLinkClick}\r\n                                                            />\r\n                                                        ))}\r\n                                                    </MenuWithRouter>\r\n                                                );\r\n                                            })\r\n                                        ) : null}\r\n                                    </MenuGroupWithRouter>\r\n                                </Fragment>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport default withRouterInnerRef(connect(mapStateToProps, mapDispatchToProps)(Navigator));\r\n","export const adminMenu = [\r\n    { //quản lý người dùng\r\n        name: 'menu.admin.manage-user',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.crud', link: '/system/user-manage'\r\n            },\r\n            {\r\n                name: 'menu.admin.crud-redux', link: '/system/user-redux'\r\n            },\r\n\r\n            {\r\n                name: 'menu.admin.manage-doctor', link: '/system/manage-doctor'\r\n                // subMenus: [\r\n                //     { name: 'menu.system.system-administrator.user-manage', link: '/system/user-manage' },\r\n                //     { name: 'menu.system.system-administrator.user-redux', link: '/system/user-redux' },\r\n                // ]\r\n            },\r\n\r\n            // {\r\n            //     name: 'menu.admin.manage-admin', link: '/system/user-admin'\r\n            // },\r\n\r\n            { //quản lý kế hoạch khám bệnh của bác sỹ\r\n                name: 'menu.doctor.manage-schedule', link: '/doctor/manage-schedule'\r\n            },\r\n\r\n        ]\r\n    },\r\n    { //quản lý phòng khám\r\n        name: 'menu.admin.clinic',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.manage-clinic', link: '/system/manage-clinic'\r\n            },\r\n        ]\r\n    },\r\n    { //quản lý chuyên khoa\r\n        name: 'menu.admin.specialty',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.manage-specialty', link: '/system/manage-specialty'\r\n            },\r\n        ]\r\n    },\r\n    { //quản lý cẩm nang\r\n        name: 'menu.admin.handbook',\r\n        menus: [\r\n            {\r\n                name: 'menu.admin.manage-handbook', link: '/system/manage-handbook'\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\nexport const doctorMenu = [\r\n    {\r\n        name: 'menu.admin.manage-user',\r\n        menus: [\r\n            { //quản lý kế hoạch khám bệnh của bác sỹ\r\n                name: 'menu.doctor.manage-schedule', link: '/doctor/manage-schedule'\r\n            },\r\n            { //quản lý bệnh nhân khám bệnh của bác sỹ\r\n                name: 'menu.doctor.manage-patient', link: '/doctor/manage-patient'\r\n            },\r\n\r\n        ]\r\n    }\r\n\r\n];","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from \"../../store/actions\";\r\nimport Navigator from '../../components/Navigator';\r\nimport { adminMenu, doctorMenu } from './menuApp';\r\nimport './Header.scss';\r\nimport { LANGUAGES, USER_ROLE } from \"../../utils\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport _ from 'lodash';\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            menuApp: []\r\n        }\r\n\r\n    }\r\n    handleChangeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language)\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { userInfo } = this.props;\r\n        let menu = [];\r\n        if (userInfo && !_.isEmpty(userInfo)) {\r\n            let role = userInfo.roleId;\r\n            if (role === USER_ROLE.ADMIN) {\r\n                menu = adminMenu;\r\n            }\r\n\r\n            if (role === USER_ROLE.DOCTOR) {\r\n                menu = doctorMenu;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            menuApp: menu\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { processLogout, language, userInfo } = this.props;\r\n\r\n        return (\r\n            <div className=\"header-container\">\r\n                {/* thanh navigator */}\r\n                <div className=\"header-tabs-container\">\r\n                    <Navigator menus={this.state.menuApp} />\r\n                </div>\r\n\r\n                <div className=\"languages\">\r\n                    <span className=\"welcome\">\r\n                        <FormattedMessage id=\"homeheader.welcome\" />\r\n                        {userInfo && userInfo.firstName ? userInfo.firstName : ''} !\r\n                    </span>\r\n                    <span className={language === LANGUAGES.VI ? \"language-vi active\" : \"language-vi\"}\r\n                        onClick={() => this.handleChangeLanguage(LANGUAGES.VI)}\r\n                    >\r\n                        VN\r\n                    </span>\r\n                    <span className={language === LANGUAGES.EN ? \"language-en active\" : \"language-en\"}\r\n                        onClick={() => this.handleChangeLanguage(LANGUAGES.EN)}\r\n                    >\r\n                        EN\r\n                    </span>\r\n\r\n\r\n                    {/* nút logout */}\r\n                    <div className=\"btn btn-logout\" onClick={processLogout} title=\"Log out\">\r\n                        <i className=\"fas fa-sign-out-alt\"></i>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        userInfo: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n        changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../../store/actions\"\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport './ManageDoctor.scss';\r\nimport Select from 'react-select';\r\nimport { CRUD_ACTIONS, LANGUAGES } from '../../../utils';\r\nimport { getDetailInforDoctor } from \"../../../services/userService\";\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageDoctor extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //save to Markdown table\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            selectedOption: '',\r\n            description: '',\r\n            listDoctors: [],\r\n            hasOldData: false,\r\n\r\n            //save to doctor_infor table\r\n            listPrice: [],\r\n            listPayment: [],\r\n            listProvince: [],\r\n            listClinic: [],\r\n            listSpecialty: [],\r\n\r\n            selectedPrice: '',\r\n            selectedPayment: '',\r\n            selectedProvince: '',\r\n            selectedClinic: '',\r\n            selectedSpecialty: '',\r\n\r\n            nameClinic: '',\r\n            addressClinic: '',\r\n            note: '',\r\n            clinicId: '',\r\n            specialtyId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.getAllRequiredDoctorInfor();\r\n    }\r\n\r\n    buildDataInputSelect = (inputData, type) => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            if (type === 'USERS') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.lastName} ${item.firstName}`;\r\n                    let labelEn = `${item.firstName} ${item.lastName}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n            if (type === 'PRICE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVi}`;\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object)\r\n                })\r\n            }\r\n            if (type === 'PAYMENT' || type === 'PROVINCE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelVi = `${item.valueVi}`;\r\n                    let labelEn = `${item.valueEn}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object)\r\n                })\r\n            }\r\n\r\n            if (type === 'SPECIALTY') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n\r\n            if (type === 'CLINIC') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object)\r\n                })\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n\r\n\r\n        if (prevProps.allRequiredDoctorInfor !== this.props.allRequiredDoctorInfor) {\r\n            let { resPayment, resPrice, resProvince, resSpecialty, resClinic } = this.props.allRequiredDoctorInfor;\r\n\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC')\r\n\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n            })\r\n        }\r\n\r\n        if (prevProps.language !== this.props.language) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS');\r\n            let { resPayment, resPrice, resProvince } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n\r\n            this.setState({\r\n                listDoctors: dataSelect,\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        })\r\n    }\r\n\r\n    handleSaveContentMarkdown = () => {\r\n        let { hasOldData } = this.state;\r\n\r\n        this.props.saveDetailDoctor({\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description: this.state.description,\r\n            doctorId: this.state.selectedOption.value,\r\n            action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n\r\n            selectedPrice: this.state.selectedPrice.value,\r\n            selectedPayment: this.state.selectedPayment.value,\r\n            selectedProvince: this.state.selectedProvince.value,\r\n            nameClinic: this.state.nameClinic,\r\n            addressClinic: this.state.addressClinic,\r\n            note: this.state.note,\r\n            clinicId: this.state.selectedClinic && this.state.selectedClinic.value ? this.state.selectedClinic.value : '',\r\n            specialtyId: this.state.selectedSpecialty.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({ selectedOption });\r\n        let { listPayment, listPrice, listProvince, listSpecialty, listClinic } = this.state;\r\n\r\n        let res = await getDetailInforDoctor(selectedOption.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n            let markdown = res.data.Markdown;\r\n\r\n            let addressClinic = '', nameClinic = '', note = '',\r\n                paymentId = '', priceId = '', provinceId = '', specialtyId = '', clinicId = '',\r\n                selectedPayment = '', selectedPrice = '', selectedProvince = '', selectedClinic = '',\r\n                selectedSpecialty = '';\r\n\r\n            if (res.data.Doctor_Infor) {\r\n                addressClinic = res.data.Doctor_Infor.addressClinic;\r\n                nameClinic = res.data.Doctor_Infor.nameClinic;\r\n                note = res.data.Doctor_Infor.note;\r\n                paymentId = res.data.Doctor_Infor.paymentId;\r\n                priceId = res.data.Doctor_Infor.priceId;\r\n                provinceId = res.data.Doctor_Infor.provinceId;\r\n                specialtyId = res.data.Doctor_Infor.specialtyId;\r\n                clinicId = res.data.Doctor_Infor.clinicId;\r\n\r\n                selectedPayment = listPayment.find(item => {\r\n                    return item && item.value === paymentId\r\n                })\r\n                selectedPrice = listPrice.find(item => {\r\n                    return item && item.value === priceId\r\n                })\r\n                selectedProvince = listProvince.find(item => {\r\n                    return item && item.value === provinceId\r\n                })\r\n\r\n                selectedSpecialty = listSpecialty.find(item => {\r\n                    return item && item.value === specialtyId\r\n                })\r\n\r\n                selectedClinic = listClinic.find(item => {\r\n                    return item && item.value === clinicId\r\n                })\r\n\r\n            }\r\n\r\n            this.setState({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true,\r\n                addressClinic: addressClinic,\r\n                nameClinic: nameClinic,\r\n                note: note,\r\n                selectedPayment: selectedPayment,\r\n                selectedPrice: selectedPrice,\r\n                selectedProvince: selectedProvince,\r\n                selectedSpecialty: selectedSpecialty,\r\n                selectedClinic: selectedClinic\r\n            })\r\n        } else {\r\n            this.setState({\r\n                contentHTML: '',\r\n                contentMarkdown: '',\r\n                description: '',\r\n                hasOldData: false,\r\n                addressClinic: '',\r\n                nameClinic: '',\r\n                note: '',\r\n                selectedPayment: '',\r\n                selectedPrice: '',\r\n                selectedProvince: '',\r\n                selectedSpecialty: '',\r\n                selectedClinic: ''\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    handleChangeSelectDoctorInfor = async (selectedOption, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[stateName] = selectedOption;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleOnChangeText = (event, id) => {\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = event.target.value;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    render() {\r\n        let { hasOldData, listSpecialty } = this.state;\r\n        return (\r\n            <div className=\"manage-doctor-container\">\r\n                <div className=\"manage-doctor-title\">\r\n                    <FormattedMessage id=\"admin.manage-doctor.title\" />\r\n                </div>\r\n                <div className=\"more-infor\">\r\n                    <div className=\"content-left form-group\">\r\n                        <label> <FormattedMessage id=\"admin.manage-doctor.select-doctor\" /></label>\r\n                        <Select\r\n                            value={this.state.selectedOption}\r\n                            onChange={this.handleChangeSelect}\r\n                            options={this.state.listDoctors}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.select-doctor\" />}\r\n                        />\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.intro\" /></label>\r\n                        <textarea className=\"form-control\"\r\n                            onChange={(event) => this.handleOnChangeText(event, 'description')}\r\n                            value={this.state.description}\r\n                        >\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"more-infor-extra row\">\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.price\" /></label>\r\n                        <Select\r\n                            value={this.state.selectedPrice}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listPrice}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.price\" />}\r\n                            name=\"selectedPrice\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.payment\" /></label>\r\n                        <Select\r\n                            value={this.state.selectedPayment}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listPayment}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.payment\" />}\r\n                            name=\"selectedPayment\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.province\" /></label>\r\n                        <Select\r\n                            value={this.state.selectedProvince}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            options={this.state.listProvince}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.province\" />}\r\n                            name=\"selectedProvince\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.nameClinic\" /></label>\r\n                        <input className=\"form-control\"\r\n                            onChange={(event) => this.handleOnChangeText(event, 'nameClinic')}\r\n                            value={this.state.nameClinic}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.addressClinic\" /></label>\r\n                        <input className=\"form-control\"\r\n                            onChange={(event) => this.handleOnChangeText(event, 'addressClinic')}\r\n                            value={this.state.addressClinic}\r\n\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.note\" /></label>\r\n                        <input className=\"form-control\"\r\n\r\n                            onChange={(event) => this.handleOnChangeText(event, 'note')}\r\n                            value={this.state.note}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.specialty\" /></label>\r\n                        <Select\r\n                            value={this.state.selectedSpecialty}\r\n                            options={this.state.listSpecialty}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.specialty\" />}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            name=\"selectedSpecialty\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 form-group\">\r\n                        <label><FormattedMessage id=\"admin.manage-doctor.select-clinic\" /></label>\r\n                        <Select\r\n                            value={this.state.selectedClinic}\r\n                            options={this.state.listClinic}\r\n                            placeholder={<FormattedMessage id=\"admin.manage-doctor.select-clinic\" />}\r\n                            onChange={this.handleChangeSelectDoctorInfor}\r\n                            name=\"selectedClinic\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"manage-doctor-editor\">\r\n                    <MdEditor\r\n                        style={{ height: '300px' }}\r\n                        renderHTML={text => mdParser.render(text)}\r\n                        onChange={this.handleEditorChange}\r\n                        value={this.state.contentMarkdown}\r\n                    />\r\n                </div>\r\n\r\n                <button\r\n                    onClick={() => this.handleSaveContentMarkdown()}\r\n                    className={hasOldData === true ? \"save-content-doctor\" : \"create-content-doctor\"}>\r\n                    {hasOldData === true ?\r\n                        <span><FormattedMessage id=\"admin.manage-doctor.save\" /></span>\r\n                        :\r\n                        <span><FormattedMessage id=\"admin.manage-doctor.add\" /></span>\r\n                    }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allRequiredDoctorInfor: state.admin.allRequiredDoctorInfor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        getAllRequiredDoctorInfor: () => dispatch(actions.getRequiredDoctorInfor()),\r\n        saveDetailDoctor: (data) => dispatch(actions.saveDetailDoctor(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './ManageSpecialty.scss';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport { CommonUtils } from '../../../utils';\r\nimport { createNewSpecialty } from '../../../services/userService';\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageSpecialty extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            imageBase64: '',\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: '',\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let stateCopy = { ...this.state }\r\n        stateCopy[id] = event.target.value;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionHTML: html,\r\n            descriptionMarkdown: text,\r\n        })\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imageBase64: base64\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveNewSpecialty = async () => {\r\n        let res = await createNewSpecialty(this.state)\r\n        if (res && res.errCode === 0) {\r\n            toast.success('Add new specialty succeeds!')\r\n            this.setState({\r\n                name: '',\r\n                imageBase64: '',\r\n                descriptionHTML: '',\r\n                descriptionMarkdown: '',\r\n            })\r\n        } else {\r\n            toast.error('Something wrongs....')\r\n            console.log('>> hoi dan it check res: ', res)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"manage-specialty-container\">\r\n                <div className=\"ms-title\">Quản lý chuyên khoa</div>\r\n\r\n                <div className=\"add-new-specialty row\">\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Tên chuyên khoa</label>\r\n                        <input className=\"form-control\" type=\"text\" value={this.state.name}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'name')}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Ảnh chuyên khoa</label>\r\n                        <input className=\"form-control-file\" type=\"file\"\r\n                            onChange={(event) => this.handleOnchangeImage(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <MdEditor\r\n                            style={{ height: '300px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.descriptionMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <button className=\"btn-save-specialty\"\r\n                            onClick={() => this.handleSaveNewSpecialty()}\r\n                        >Save</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './ManageClinic.scss';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport { CommonUtils } from '../../../utils';\r\nimport { createNewClinic } from '../../../services/userService';\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n\r\nconst mdParser = new MarkdownIt(/* Markdown-it options */);\r\n\r\nclass ManageClinic extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            address: '',\r\n            imageBase64: '',\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: '',\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleOnChangeInput = (event, id) => {\r\n        let stateCopy = { ...this.state }\r\n        stateCopy[id] = event.target.value;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionHTML: html,\r\n            descriptionMarkdown: text,\r\n        })\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imageBase64: base64\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveNewClinic = async () => {\r\n\r\n        let res = await createNewClinic(this.state)\r\n        if (res && res.errCode === 0) {\r\n            toast.success('Add new clinic succeeds!')\r\n            this.setState({\r\n                name: '',\r\n                imageBase64: '',\r\n                address: '',\r\n                descriptionHTML: '',\r\n                descriptionMarkdown: '',\r\n            })\r\n        } else {\r\n            toast.error('Something wrongs....')\r\n            console.log('>> hoi dan it check res: ', res)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"manage-specialty-container\">\r\n                <div className=\"ms-title\">Quản lý phòng khám</div>\r\n\r\n                <div className=\"add-new-specialty row\">\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Tên phòng khám</label>\r\n                        <input className=\"form-control\" type=\"text\" value={this.state.name}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'name')}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Ảnh phòng khám</label>\r\n                        <input className=\"form-control-file\" type=\"file\"\r\n                            onChange={(event) => this.handleOnchangeImage(event)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-6 form-group\">\r\n                        <label>Địa chỉ phòng khám</label>\r\n                        <input className=\"form-control\" type=\"text\" value={this.state.address}\r\n                            onChange={(event) => this.handleOnChangeInput(event, 'address')}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <MdEditor\r\n                            style={{ height: '300px' }}\r\n                            renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.descriptionMarkdown}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <button className=\"btn-save-specialty\"\r\n                            onClick={() => this.handleSaveNewClinic()}\r\n                        >Save</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageClinic);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport UserManage from '../containers/System/UserManage';\r\nimport UserRedux from '../containers/System/Admin/UserRedux';\r\nimport Header from '../containers/Header/Header';\r\nimport ManageDoctor from '../containers/System/Admin/ManageDoctor';\r\nimport ManageSpecialty from '../containers/System/Specialty/ManageSpecialty';\r\nimport ManageClinic from '../containers/System/Clinic/ManageClinic';\r\n\r\nclass System extends Component {\r\n\r\n    render() {\r\n        const { systemMenuPath, isLoggedIn } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/system/user-manage\" component={UserManage} />\r\n                            <Route path=\"/system/user-redux\" component={UserRedux} />\r\n                            <Route path=\"/system/manage-doctor\" component={ManageDoctor} />\r\n                            <Route path=\"/system/manage-specialty\" component={ManageSpecialty} />\r\n                            <Route path=\"/system/manage-clinic\" component={ManageClinic} />\r\n\r\n                            <Route component={() => { return (<Redirect to={systemMenuPath} />) }} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(System);\r\n","export default __webpack_public_path__ + \"static/media/logo.2e2d78c9.svg\";","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './HomeHeader.scss';\r\nimport logo from '../../assets/logo.svg';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { LANGUAGES } from \"../../utils\";\r\nimport { withRouter } from 'react-router';\r\nimport { changeLanguageApp } from \"../../store/actions\"\r\n\r\nclass HomeHeader extends Component {\r\n\r\n    changeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language)\r\n    }\r\n\r\n    returnToHome = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/home`)\r\n        }\r\n    }\r\n    render() {\r\n        let language = this.props.language;\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"home-header-container\">\r\n                    <div className=\"home-header-content\">\r\n                        <div className=\"left-content\">\r\n                            <i className=\"fas fa-bars\"></i>\r\n                            <img className=\"header-logo\" src={logo} onClick={() => this.returnToHome()} />\r\n                        </div>\r\n                        <div className=\"center-content\">\r\n                            <div className=\"child-content\">\r\n                                <div><b> <FormattedMessage id=\"homeheader.speciality\" /> </b></div>\r\n                                <div className=\"subs-title\"><FormattedMessage id=\"homeheader.searchdoctor\" /></div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div><b><FormattedMessage id=\"homeheader.health-facility\" /></b></div>\r\n                                <div className=\"subs-title\"><FormattedMessage id=\"homeheader.select-room\" /></div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div><b><FormattedMessage id=\"homeheader.doctor\" /></b></div>\r\n                                <div className=\"subs-title\"><FormattedMessage id=\"homeheader.select-doctor\" /></div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div><b><FormattedMessage id=\"homeheader.fee\" /></b></div>\r\n                                <div className=\"subs-title\"><FormattedMessage id=\"homeheader.check-health\" /></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"right-content\">\r\n                            <div className=\"support\"><i className=\"fas fa-question-circle\"></i>\r\n                                <FormattedMessage id=\"homeheader.support\" />\r\n                            </div>\r\n                            <div\r\n                                className={language === LANGUAGES.VI ?\r\n                                    'language-vi active' : 'language-vi'}>\r\n                                <span onClick={() => this.changeLanguage(LANGUAGES.VI)}>\r\n                                    VN\r\n                                </span>\r\n                            </div>\r\n                            <div\r\n                                className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}>\r\n                                <span onClick={() => this.changeLanguage(LANGUAGES.EN)}>\r\n                                    EN\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.props.isShowBanner === true &&\r\n                    <div className=\"home-header-banner\">\r\n                        <div className=\"content-up\">\r\n                            <div className=\"title1\"><FormattedMessage id=\"banner.title1\" /></div>\r\n                            <div className=\"title2\"><FormattedMessage id=\"banner.title2\" /></div>\r\n                            <div className=\"search\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                                <input type=\"text\" placeholder=\"Tìm chuyên khoa khám bệnh\" />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"content-down\">\r\n                            <div className=\"options\">\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"far fa-hospital\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child1\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fas fa-mobile-alt\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child2\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fas fa-procedures\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child3\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fas fa-flask\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child4\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fas fa-user-md\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child5\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fas fa-briefcase-medical\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child6\" /></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        userInfo: state.user.userInfo,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        changeLanguageAppRedux: (language) => dispatch(changeLanguageApp(language))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomeHeader));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Specialty.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from \"react-slick\";\r\nimport { getAllSpecialty } from '../../../services/userService';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass Specialty extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dataSpecialty: []\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllSpecialty();\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataSpecialty: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n\r\n    handleViewDetailSpecialty = (item) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-specialty/${item.id}`)\r\n        }\r\n    }\r\n    render() {\r\n        let { dataSpecialty } = this.state;\r\n\r\n        return (\r\n            <div className=\"section-share section-specialty\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">\r\n                            <FormattedMessage id=\"homepage.specialty-poplular\" />\r\n                        </span>\r\n                        <button className=\"btn-section\">\r\n                            <FormattedMessage id=\"homepage.more-infor\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {dataSpecialty && dataSpecialty.length > 0 &&\r\n                                dataSpecialty.map((item, index) => {\r\n                                    return (\r\n                                        <div\r\n                                            className=\"section-customize specialty-child\"\r\n                                            key={index}\r\n                                            onClick={() => this.handleViewDetailSpecialty(item)}\r\n                                        >\r\n                                            <div\r\n                                                className=\"bg-image section-specialty\"\r\n                                                style={{ backgroundImage: `url(${item.image})` }}\r\n                                            />\r\n                                            <div className=\"specialty-name\">{item.name}</div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Specialty));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './MedicalFacility.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from \"react-slick\";\r\nimport { getAllClinic } from '../../../services/userService';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass MedicalFacility extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataClinics: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let res = await getAllClinic();\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataClinics: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n\r\n    handleViewDetailClinic = (clinic) => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/detail-clinic/${clinic.id}`)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { dataClinics } = this.state;\r\n        return (\r\n            <div className=\"section-share section-medical-facility\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">Cơ sở y tế nổi bật</span>\r\n                        <button className=\"btn-section\">xem thêm</button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            {dataClinics && dataClinics.length > 0 &&\r\n                                dataClinics.map((item, index) => {\r\n                                    return (\r\n                                        <div className=\"section-customize clinic-child\"\r\n                                            key={index}\r\n                                            onClick={() => this.handleViewDetailClinic(item)}\r\n\r\n                                        >\r\n                                            <div className=\"bg-image section-medical-facility \"\r\n\r\n                                                style={{ backgroundImage: `url(${item.image})` }}\r\n                                            />\r\n                                            <div className=\"clinic-name\">{item.name}</div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MedicalFacility));\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Slider from \"react-slick\";\r\n\r\nclass HandBook extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"section-share section-handbook\">\r\n                <div className=\"section-container\">\r\n                    <div className=\"section-header\">\r\n                        <span className=\"title-section\">Cẩm nang</span>\r\n                        <button className=\"btn-section\">xem thêm</button>\r\n                    </div>\r\n                    <div className=\"section-body\">\r\n                        <Slider {...this.props.settings}>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cẩm nang 1</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cẩm nang 2</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cẩm nang 3</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cẩm nang 4</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cẩm nang 5</div>\r\n                            </div>\r\n                            <div className=\"section-customize\">\r\n                                <div className=\"bg-image section-handbook\" />\r\n                                <div>Cẩm nang 6</div>\r\n                            </div>\r\n\r\n                        </Slider>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HandBook);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nclass About extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"section-share section-about\">\r\n                <div className=\"section-about-header\">\r\n                    Truyền thông nói về Channel Hỏi Dân IT\r\n                </div>\r\n                <div className=\"section-about-content\">\r\n                    <div className=\"content-left\">\r\n                        <iframe width=\"100%\" height=\"400px\"\r\n                            src=\"https://www.youtube.com/embed/VznptsZ9QZU?list=PLncHg6Kn2JT6E38Z3kit9Hnif1xC_9VqI\"\r\n                            title=\"YouTube video player\"\r\n                            frameBorder=\"0\"\r\n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                            allowFullScreen>\r\n                        </iframe>\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <p>\r\n                            Ngày mình còn là sinh viên, đi học tại giảng đường đại học, có rất nhiều câu hỏi mà các thầy cô không giúp mình trả lời được, ví dụ như \"Để trở thành một lập trình viên website thì cần học những gì\", hay một câu hỏi đơn giản hơn, \"Học công nghệ thông tin, ra trường thường làm những gì ? \"...\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(About);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\nclass HomeFooter extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"home-footer\">\r\n                <p>&copy; 2021 Hỏi Dân IT với Eric. More information, please visit my youtube channel.\r\n                    <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=VznptsZ9QZU&list=PLncHg6Kn2JT6E38Z3kit9Hnif1xC_9VqI\">\r\n                        &#8594; Click here &#8592;\r\n                    </a>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeFooter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from './HomeHeader';\r\nimport Specialty from './Section/Specialty';\r\nimport MedicalFacility from './Section/MedicalFacility';\r\nimport OutStandingDoctor from './Section/OutStandingDoctor';\r\nimport HandBook from './Section/HandBook';\r\nimport About from './Section/About';\r\nimport HomeFooter from './HomeFooter';\r\n\r\nimport './HomePage.scss';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\r\nclass HomePage extends Component {\r\n\r\n    render() {\r\n        let settings = {\r\n            dots: false,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 4,\r\n            slidesToScroll: 1,\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <HomeHeader isShowBanner={true} />\r\n                <Specialty\r\n                    settings={settings}\r\n                />\r\n                <MedicalFacility\r\n                    settings={settings}\r\n                />\r\n                <OutStandingDoctor\r\n                    settings={settings}\r\n                />\r\n\r\n                <HandBook settings={settings} />\r\n                <About />\r\n                <HomeFooter />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './ProfileDoctor.scss';\r\nimport { getProfileDoctorById } from '../../../services/userService';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport NumberFormat from 'react-number-format';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ProfileDoctor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataProfile: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let data = await this.getInforDoctor(this.props.doctorId);\r\n        this.setState({\r\n            dataProfile: data\r\n        })\r\n    }\r\n\r\n    getInforDoctor = async (id) => {\r\n        let result = {};\r\n        if (id) {\r\n            let res = await getProfileDoctorById(id);\r\n            if (res && res.errCode === 0) {\r\n                result = res.data;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n        if (this.props.doctorId !== prevProps.doctorId) {\r\n            // this.getInforDoctor(this.props.doctorId)\r\n        }\r\n\r\n    }\r\n\r\n    renderTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ?\r\n                dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\r\n\r\n            let date = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\r\n                :\r\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd - MM/DD/YYYY')\r\n            return (\r\n                <>\r\n                    <div>{time} - {date}</div>\r\n                    <div><FormattedMessage id=\"patient.booking-modal.priceBooking\" /> </div>\r\n                </>\r\n            )\r\n        }\r\n        return <></>\r\n    }\r\n\r\n    render() {\r\n        let { dataProfile } = this.state;\r\n        let { language, isShowDescriptionDoctor,\r\n            dataTime, isShowPrice, isShowLinkDetail,\r\n            doctorId\r\n        } = this.props;\r\n\r\n        let nameVi = '', nameEn = '';\r\n        if (dataProfile && dataProfile.positionData) {\r\n            nameVi = `${dataProfile.positionData.valueVi}, ${dataProfile.lastName} ${dataProfile.firstName} `;\r\n            nameEn = `${dataProfile.positionData.valueEn}, ${dataProfile.firstName} ${dataProfile.lastName}`;\r\n        }\r\n\r\n        return (\r\n            <div className=\"profile-doctor-container\">\r\n                <div className=\"intro-doctor\">\r\n                    <div\r\n                        className=\"content-left\"\r\n                        style={{ backgroundImage: `url(${dataProfile && dataProfile.image ? dataProfile.image : ''})` }}>\r\n\r\n                    </div>\r\n                    <div className=\"content-right\">\r\n                        <div className=\"up\">\r\n                            {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                        </div>\r\n                        <div className=\"down\">\r\n                            {isShowDescriptionDoctor === true ?\r\n                                <>\r\n                                    {dataProfile && dataProfile.Markdown\r\n                                        && dataProfile.Markdown.description\r\n                                        &&\r\n                                        <span>\r\n                                            {dataProfile.Markdown.description}\r\n                                        </span>\r\n                                    }\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    {this.renderTimeBooking(dataTime)}\r\n                                </>\r\n                            }\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                {isShowLinkDetail === true &&\r\n                    <div className=\"view-detail-doctor\"\r\n                    >\r\n                        <Link to={`/detail-doctor/${doctorId}`}>Xem thêm</Link>\r\n\r\n                    </div>\r\n                }\r\n\r\n                {isShowPrice === true &&\r\n                    <div className=\"price\">\r\n                        <FormattedMessage id=\"patient.booking-modal.price\" />\r\n                        {dataProfile && dataProfile.Doctor_Infor && language === LANGUAGES.VI &&\r\n                            <NumberFormat\r\n                                className=\"currency\"\r\n                                value={dataProfile.Doctor_Infor.priceTypeData.valueVi}\r\n                                displayType={'text'}\r\n                                thousandSeparator={true}\r\n                                suffix={'VND'}\r\n                            />\r\n                        }\r\n\r\n                        {dataProfile && dataProfile.Doctor_Infor && language === LANGUAGES.EN &&\r\n                            <NumberFormat\r\n                                className=\"currency\"\r\n                                value={dataProfile.Doctor_Infor.priceTypeData.valueEn}\r\n                                displayType={'text'}\r\n                                thousandSeparator={true}\r\n                                suffix={'$'}\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileDoctor);\r\n","import React, { Component } from 'react';\r\nimport Flatpickr from 'react-flatpickr';\r\nimport moment from 'moment';\r\n\r\nimport { KeyCodeUtils } from \"../../utils\";\r\nimport './DatePicker.scss';\r\n\r\n// const CustomInput = ({ value, defaultValue, inputRef, onInputChange, onInputBlur, ...props }) => {\r\n//     return <input {...props} className='custom-form-control custom-date-input' defaultValue={defaultValue} ref={inputRef}\r\n//         onChange={onInputChange}\r\n//         onBlur={onInputBlur}\r\n//     />;\r\n// };\r\n\r\nclass DatePicker extends Component {\r\n\r\n    flatpickrNode = null;\r\n\r\n    nodeRef = element => {\r\n        this.flatpickr = element && element.flatpickr;\r\n        this.flatpickrNode = element && element.node;\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.addEventListener('blur', this.handleBlur);\r\n            this.flatpickrNode.addEventListener('keydown', this.handlerKeyDown);\r\n        }\r\n    };\r\n\r\n    handlerKeyDown = (event) => {\r\n        const keyCode = event.which || event.keyCode;\r\n        if (keyCode === KeyCodeUtils.ENTER) {\r\n            event.preventDefault();\r\n            const { onChange } = this.props;\r\n            const value = event.target.value;\r\n\r\n            // Take the blur event and process the string value\r\n            const valueMoment = moment(value, 'DD/MM/YYYY');\r\n            onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.removeEventListener('blur', this.handleBlur);\r\n            this.flatpickrNode.removeEventListener('keydown', this.handlerKeyDown);\r\n        }\r\n    }\r\n\r\n    handleBlur = (event) => {\r\n        const { onChange } = this.props;\r\n        const value = event.target.value;\r\n\r\n        // Take the blur event and process the string value\r\n        event.preventDefault();\r\n        const valueMoment = moment(value, 'DD/MM/YYYY');\r\n        onChange([valueMoment.toDate(), valueMoment.toDate()]);\r\n    };\r\n\r\n    onOpen = () => {\r\n        if (this.flatpickrNode) {\r\n            this.flatpickrNode.blur();\r\n        }\r\n    }\r\n\r\n    close() {\r\n        this.flatpickr.close();\r\n    }\r\n\r\n    checkDateValue = (str, max) => {\r\n        if (str.charAt(0) !== '0' || str === '00') {\r\n            var num = parseInt(str);\r\n            if (isNaN(num) || num <= 0 || num > max) num = 1;\r\n            str = num > parseInt(max.toString().charAt(0)) && num.toString().length === 1 ? '0' + num : num.toString();\r\n        };\r\n        return str;\r\n    }\r\n\r\n    // autoFormatonBlur = (value) => {\r\n    //     var input = value;\r\n    //     var values = input.split('/').map(function (v, i) {\r\n    //         return v.replace(/\\D/g, '')\r\n    //     });\r\n    //     var output = '';\r\n\r\n    //     if (values.length == 3) {\r\n    //         var year = values[2].length !== 4 ? parseInt(values[2]) + 2000 : parseInt(values[2]);\r\n    //         var month = parseInt(values[0]) - 1;\r\n    //         var day = parseInt(values[1]);\r\n    //         var d = new Date(year, month, day);\r\n    //         if (!isNaN(d)) {\r\n    //             //document.getElementById('result').innerText = d.toString();\r\n    //             var dates = [d.getMonth() + 1, d.getDate(), d.getFullYear()];\r\n    //             output = dates.map(function (v) {\r\n    //                 v = v.toString();\r\n    //                 return v.length == 1 ? '0' + v : v;\r\n    //             }).join(' / ');\r\n    //         };\r\n    //     };\r\n    //     // this.value = output;\r\n    //     return output;\r\n    // }\r\n\r\n    autoFormatOnChange = (value, seperator) => {\r\n        var input = value;\r\n\r\n        let regexForDeleting = new RegExp(`\\\\D\\\\${seperator}$`);\r\n\r\n        //if (/\\D\\/$/.test(input)) input = input.substr(0, input.length - 3); // dat.nt: Xóa thêm 1 ký tự nếu xóa dấu cách sau / (VD: 12 / 12 /=> 12 / 1)\r\n\r\n        if (regexForDeleting.test(input)) input = input.substr(0, input.length - 3);\r\n\r\n        var values = input.split(seperator).map(function (v) {\r\n            return v.replace(/\\D/g, '')\r\n        });\r\n\r\n        if (values[0]) values[0] = this.checkDateValue(values[0], 31);\r\n        if (values[1]) values[1] = this.checkDateValue(values[1], 12);\r\n        var output = values.map(function (v, i) {\r\n            return v.length === 2 && i < 2 ? v + ' ' + seperator + ' ' : v;\r\n        });\r\n        return output.join('').substr(0, 14);\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        if (this.DISPLAY_FORMAT === this.DATE_FORMAT_AUTO_FILL) {\r\n            let converted = this.autoFormatOnChange(e.target.value, this.SEPERATOR);\r\n            e.target.value = converted;\r\n        }\r\n    }\r\n\r\n    onInputBlur = (e) => {\r\n    }\r\n\r\n    //dat.nt : Auto Fill cho dạng ngăn cách và format cụ thể (seperator có thể dc thay thế)\r\n    SEPERATOR = \"/\";\r\n    DATE_FORMAT_AUTO_FILL = \"d/m/Y\"; // Format không thay đổi\r\n\r\n    // dat.nt : Format ngày hiển thị\r\n    DISPLAY_FORMAT = \"d/m/Y\";\r\n\r\n    render() {\r\n        const { value, onChange, minDate, onClose, ...otherProps } = this.props;\r\n        const options = {\r\n            dateFormat: this.DISPLAY_FORMAT,\r\n            allowInput: true,\r\n            disableMobile: true,\r\n            onClose: onClose,\r\n            onOpen: this.onOpen\r\n        };\r\n        if (minDate) {\r\n            options.minDate = minDate;\r\n        }\r\n        return (\r\n            <Flatpickr\r\n                ref={this.nodeRef}\r\n                value={value}\r\n                onChange={onChange}\r\n                options={options}\r\n                // render={\r\n                //     ({ defaultValue, value, ...props }, ref) => {\r\n                //         return <CustomInput defaultValue={defaultValue} inputRef={ref} onInputChange={this.onInputChange} onInputBlur={this.onInputBlur} />\r\n                //     }\r\n                // }\r\n                {...otherProps}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DatePicker;\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './BookingModal.scss';\r\nimport { Modal } from 'reactstrap';\r\nimport ProfileDoctor from '../ProfileDoctor';\r\nimport _ from 'lodash';\r\nimport DatePicker from '../../../../components/Input/DatePicker';\r\nimport * as actions from '../../../../store/actions';\r\nimport { LANGUAGES } from '../../../../utils';\r\nimport Select from 'react-select';\r\nimport { postPatientBookAppointment } from '../../../../services/userService';\r\nimport { toast } from \"react-toastify\";\r\nimport moment from 'moment';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass BookingModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            address: '',\r\n            reason: '',\r\n            birthday: '',\r\n            selectedGender: '',\r\n            doctorId: '',\r\n            genders: '',\r\n            timeType: '',\r\n            isShowLoading: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.getGenders();\r\n\r\n\r\n    }\r\n    buildDataGender = (data) => {\r\n        let result = [];\r\n        let language = this.props.language;\r\n        if (data && data.length > 0) {\r\n            data.map(item => {\r\n                let object = {};\r\n                object.label = language === LANGUAGES.VI ? item.valueVi : item.valueEn;\r\n                object.value = item.keyMap;\r\n                result.push(object)\r\n            })\r\n        }\r\n        return result;\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            this.setState({\r\n                genders: this.buildDataGender(this.props.genders)\r\n            })\r\n        }\r\n        if (this.props.genders !== prevProps.genders) {\r\n            this.setState({\r\n                genders: this.buildDataGender(this.props.genders)\r\n            })\r\n        }\r\n        if (this.props.dataTime !== prevProps.dataTime) {\r\n            if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\r\n                let doctorId = this.props.dataTime.doctorId;\r\n                let timeType = this.props.dataTime.timeType;\r\n                this.setState({\r\n                    doctorId: doctorId,\r\n                    timeType: timeType\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    handleOnchangeInput = (event, id) => {\r\n        let valueInput = event.target.value;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = valueInput;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            birthday: date[0]\r\n        })\r\n    }\r\n\r\n    handleChangeSelect = (selectedOption) => {\r\n        this.setState({ selectedGender: selectedOption });\r\n    }\r\n\r\n    buildTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ?\r\n                dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\r\n\r\n            let date = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.date / 1000).format('dddd - DD/MM/YYYY')\r\n                :\r\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd - MM/DD/YYYY');\r\n\r\n            return `${time} - ${date}`\r\n\r\n        }\r\n        return ''\r\n    }\r\n\r\n    buildDoctorName = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let name = language === LANGUAGES.VI ?\r\n                `${dataTime.doctorData.lastName} ${dataTime.doctorData.firstName}`\r\n                :\r\n                `${dataTime.doctorData.firstName} ${dataTime.doctorData.lastName}`\r\n\r\n            return name;\r\n        }\r\n        return ''\r\n    }\r\n\r\n\r\n    handleConfirmBooking = async () => {\r\n        //validate input\r\n        // data.email || !data.doctorId || !data.timeType || !data.date\r\n        this.setState({\r\n            isShowLoading: true\r\n        })\r\n        let date = new Date(this.state.birthday).getTime();\r\n        let timeString = this.buildTimeBooking(this.props.dataTime);\r\n        let doctorName = this.buildDoctorName(this.props.dataTime);\r\n\r\n        let res = await postPatientBookAppointment({\r\n            fullName: this.state.fullName,\r\n            phoneNumber: this.state.fullName,\r\n            email: this.state.email,\r\n            address: this.state.address,\r\n            reason: this.state.reason,\r\n            date: this.props.dataTime.date,\r\n            birthday: date,\r\n            selectedGender: this.state.selectedGender.value,\r\n            doctorId: this.state.doctorId,\r\n            timeType: this.state.timeType,\r\n            language: this.props.language,\r\n            timeString: timeString,\r\n            doctorName: doctorName\r\n        })\r\n\r\n        this.setState({\r\n            isShowLoading: false\r\n        })\r\n\r\n        if (res && res.errCode === 0) {\r\n            toast.success('Booking a new appointment succeed!')\r\n            this.props.closeBookingClose();\r\n        } else {\r\n            toast.error('Booking a new appointment error!')\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let { isOpenModal, closeBookingClose, dataTime } = this.props;\r\n        let doctorId = '';\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            doctorId = dataTime.doctorId\r\n        }\r\n\r\n        return (\r\n            <LoadingOverlay\r\n                active={this.state.isShowLoading}\r\n                spinner\r\n                text='Loading...'\r\n            >\r\n                <Modal\r\n                    isOpen={isOpenModal}\r\n                    className={'booking-modal-container'}\r\n                    size=\"lg\"\r\n                    centered\r\n                // backdrop={true}\r\n                >\r\n                    <div className=\"booking-modal-content\">\r\n                        <div className=\"booking-modal-header\">\r\n                            <span className=\"left\">\r\n                                <FormattedMessage id=\"patient.booking-modal.title\" />\r\n                            </span>\r\n                            <span\r\n                                className=\"right\"\r\n                                onClick={closeBookingClose}\r\n                            ><i className=\"fas fa-times\"></i></span>\r\n                        </div>\r\n                        <div className=\"booking-modal-body\">\r\n                            <div className=\"doctor-infor\">\r\n                                <ProfileDoctor\r\n                                    doctorId={doctorId}\r\n                                    isShowDescriptionDoctor={false}\r\n                                    dataTime={dataTime}\r\n                                    isShowLinkDetail={false}\r\n                                    isShowPrice={true}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label>\r\n                                        <FormattedMessage id=\"patient.booking-modal.fullName\" />\r\n                                    </label>\r\n                                    <input className=\"form-control\"\r\n                                        value={this.state.fullName}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'fullName')}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label>\r\n                                        <FormattedMessage id=\"patient.booking-modal.phoneNumber\" />\r\n                                    </label>\r\n                                    <input className=\"form-control\"\r\n                                        value={this.state.phoneNumber}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'phoneNumber')}\r\n\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        value={this.state.email}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'email')}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.address\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        value={this.state.address}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'address')}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"col-12 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.reason\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        value={this.state.reason}\r\n                                        onChange={(event) => this.handleOnchangeInput(event, 'reason')}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.birthday\" /></label>\r\n                                    <DatePicker\r\n                                        onChange={this.handleOnchangeDatePicker}\r\n                                        className=\"form-control\"\r\n                                        value={this.state.birthday}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.gender\" /></label>\r\n                                    <Select\r\n                                        value={this.state.selectedGender}\r\n                                        onChange={this.handleChangeSelect}\r\n                                        options={this.state.genders}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"booking-modal-footer\">\r\n                            <button className=\"btn-booking-confirm\"\r\n                                onClick={() => this.handleConfirmBooking()}\r\n                            >\r\n                                <FormattedMessage id=\"patient.booking-modal.btnConfirm\" />\r\n                            </button>\r\n                            <button className=\"btn-booking-cancel\"\r\n                                onClick={closeBookingClose}\r\n                            >\r\n                                <FormattedMessage id=\"patient.booking-modal.btnCancel\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genders: state.admin.genders,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getGenders: () => dispatch(actions.fetchGenderStart()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './DoctorSchedule.scss';\r\nimport moment from 'moment';\r\nimport localization from 'moment/locale/vi';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { getScheduleDoctorByDate } from '../../../services/userService';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport BookingModal from './Modal/BookingModal';\r\n\r\nclass DoctorSchedule extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allDays: [],\r\n            allAvalableTime: [],\r\n            isOpenModalBooking: false,\r\n            dataScheduleTimeModal: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let { language } = this.props;\r\n        let allDays = this.getArrDays(language);\r\n\r\n        if (this.props.doctorIdFromParent) {\r\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\r\n            this.setState({\r\n                allAvalableTime: res.data ? res.data : []\r\n            })\r\n        }\r\n\r\n        this.setState({\r\n            allDays: allDays,\r\n        })\r\n\r\n    }\r\n\r\n\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n\r\n    getArrDays = (language) => {\r\n        let allDays = []\r\n        for (let i = 0; i < 7; i++) {\r\n            let object = {};\r\n            if (language === LANGUAGES.VI) {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).format('DD/MM');\r\n                    let today = `Hôm nay - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    let labelVi = moment(new Date()).add(i, 'days').format('dddd - DD/MM');\r\n                    object.label = this.capitalizeFirstLetter(labelVi)\r\n                }\r\n\r\n            } else {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).format('DD/MM');\r\n                    let today = `Today - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    object.label = moment(new Date()).add(i, 'days').locale('en').format(\"ddd - DD/MM\");\r\n                }\r\n            }\r\n\r\n            object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf();\r\n            allDays.push(object);\r\n        }\r\n        return allDays;\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            let allDays = this.getArrDays(this.props.language);\r\n            this.setState({\r\n                allDays: allDays\r\n            })\r\n        }\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let allDays = this.getArrDays(this.props.language);\r\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\r\n            this.setState({\r\n                allAvalableTime: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnChangeSelect = async (event) => {\r\n        if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1) {\r\n            let doctorId = this.props.doctorIdFromParent;\r\n            let date = event.target.value\r\n            let res = await getScheduleDoctorByDate(doctorId, date);\r\n\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    allAvalableTime: res.data ? res.data : []\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    handleClickScheduleTime = (time) => {\r\n        this.setState({\r\n            isOpenModalBooking: true,\r\n            dataScheduleTimeModal: time\r\n        })\r\n        console.log('hoi dan it channel: time:', time)\r\n    }\r\n\r\n    closeBookingClose = () => {\r\n        this.setState({\r\n            isOpenModalBooking: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { allDays, allAvalableTime, isOpenModalBooking, dataScheduleTimeModal } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <>\r\n                <div className=\"doctor-schedule-container\">\r\n                    <div className=\"all-schedule\">\r\n                        <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n                            {allDays && allDays.length > 0 &&\r\n                                allDays.map((item, index) => {\r\n                                    return (\r\n                                        <option\r\n                                            value={item.value}\r\n                                            key={index}\r\n                                        >\r\n                                            {item.label}\r\n                                        </option>\r\n                                    )\r\n                                })}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"all-available-time\">\r\n                        <div className=\"text-calendar\">\r\n                            <i className=\"fas fa-calendar-alt\">\r\n                                <span><FormattedMessage id=\"patient.detail-doctor.schedule\" /></span>\r\n                            </i>\r\n                        </div>\r\n                        <div className=\"time-content\">\r\n                            {allAvalableTime && allAvalableTime.length > 0 ?\r\n                                <>\r\n                                    <div className=\"time-content-btns\">\r\n                                        {allAvalableTime.map((item, index) => {\r\n                                            let timeDisplay = language === LANGUAGES.VI ?\r\n                                                item.timeTypeData.valueVi : item.timeTypeData.valueEn;\r\n                                            return (\r\n                                                <button\r\n                                                    key={index}\r\n                                                    className={language === LANGUAGES.VI ? 'btn-vie' : 'btn-en'}\r\n                                                    onClick={() => this.handleClickScheduleTime(item)}\r\n                                                >\r\n                                                    {timeDisplay}\r\n                                                </button>\r\n                                            )\r\n                                        })\r\n                                        }\r\n                                    </div>\r\n\r\n                                    <div className=\"book-free\">\r\n                                        <span>\r\n                                            <FormattedMessage id=\"patient.detail-doctor.choose\" />\r\n                                            <i className=\"far fa-hand-point-up\"></i>\r\n                                            <FormattedMessage id=\"patient.detail-doctor.book-free\" />\r\n                                        </span>\r\n                                    </div>\r\n                                </>\r\n                                :\r\n                                <div className=\"no-schedule\">\r\n                                    <FormattedMessage id=\"patient.detail-doctor.no-schedule\" />\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <BookingModal\r\n                    isOpenModal={isOpenModalBooking}\r\n                    closeBookingClose={this.closeBookingClose}\r\n                    dataTime={dataScheduleTimeModal}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './DoctorExtraInfor.scss';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { getExtraInforDoctorById } from '../../../services/userService';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nclass DoctorExtraInfor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isShowDetailInfor: false,\r\n            extraInfor: {}\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.doctorIdFromParent) {\r\n            let res = await getExtraInforDoctorById(this.props.doctorIdFromParent);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    extraInfor: res.data\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let res = await getExtraInforDoctorById(this.props.doctorIdFromParent);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    extraInfor: res.data\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    showHideDetailInfor = (status) => {\r\n        this.setState({\r\n            isShowDetailInfor: status\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { isShowDetailInfor, extraInfor } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"doctor-extra-infor-container\">\r\n                <div className=\"content-up\">\r\n                    <div className=\"text-address\">\r\n                        <FormattedMessage id=\"patient.extra-infor-doctor.text-address\" />\r\n                    </div>\r\n                    <div className=\"name-clinic\">\r\n                        {extraInfor && extraInfor.nameClinic ? extraInfor.nameClinic : ''}\r\n                    </div>\r\n                    <div className=\"detail-address\">\r\n                        {extraInfor && extraInfor.addressClinic ? extraInfor.addressClinic : ''}\r\n                    </div>\r\n                </div>\r\n                <div className=\"content-down\">\r\n                    {isShowDetailInfor === false &&\r\n                        <div className=\"short-infor\">\r\n                            <FormattedMessage id=\"patient.extra-infor-doctor.price\" />\r\n                            {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.VI\r\n                                &&\r\n                                <NumberFormat\r\n                                    className=\"currency\"\r\n                                    value={extraInfor.priceTypeData.valueVi}\r\n                                    displayType={'text'}\r\n                                    thousandSeparator={true}\r\n                                    suffix={'VND'}\r\n                                />\r\n                            }\r\n\r\n                            {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.EN\r\n                                &&\r\n                                <NumberFormat\r\n                                    className=\"currency\"\r\n                                    value={extraInfor.priceTypeData.valueEn}\r\n                                    displayType={'text'}\r\n                                    thousandSeparator={true}\r\n                                    suffix={'$'}\r\n                                />\r\n                            }\r\n\r\n                            <span className=\"detail\" onClick={() => this.showHideDetailInfor(true)}>\r\n                                <FormattedMessage id=\"patient.extra-infor-doctor.detail\" />\r\n                            </span>\r\n                        </div>\r\n                    }\r\n\r\n                    {isShowDetailInfor === true &&\r\n                        <>\r\n                            <div className=\"title-price\">\r\n                                <FormattedMessage id=\"patient.extra-infor-doctor.price\" />\r\n                            </div>\r\n                            <div className=\"detail-infor\">\r\n                                <div className=\"price\">\r\n                                    <span className=\"left\">\r\n                                        <FormattedMessage id=\"patient.extra-infor-doctor.price\" />\r\n                                    </span>\r\n                                    <span className=\"right\">\r\n                                        {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.VI\r\n                                            &&\r\n                                            <NumberFormat\r\n                                                className=\"currency\"\r\n                                                value={extraInfor.priceTypeData.valueVi}\r\n                                                displayType={'text'}\r\n                                                thousandSeparator={true}\r\n                                                suffix={'VND'}\r\n                                            />\r\n                                        }\r\n\r\n                                        {extraInfor && extraInfor.priceTypeData && language === LANGUAGES.EN\r\n                                            &&\r\n                                            <NumberFormat\r\n                                                className=\"currency\"\r\n                                                value={extraInfor.priceTypeData.valueEn}\r\n                                                displayType={'text'}\r\n                                                thousandSeparator={true}\r\n                                                suffix={'$'}\r\n                                            />\r\n                                        }\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"note\">\r\n                                    {extraInfor && extraInfor.note ? extraInfor.note : ''}\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"payment\">\r\n                                <FormattedMessage id=\"patient.extra-infor-doctor.payment\" />\r\n\r\n                                {extraInfor && extraInfor.paymentTypeData && language === LANGUAGES.VI\r\n                                    ? extraInfor.paymentTypeData.valueVi : ''}\r\n\r\n                                {extraInfor && extraInfor.paymentTypeData && language === LANGUAGES.EN\r\n                                    ?\r\n                                    extraInfor.paymentTypeData.valueEn : ''}\r\n\r\n                            </div>\r\n                            <div className=\"hide-price\">\r\n                                <span onClick={() => this.showHideDetailInfor(false)}>\r\n                                    <FormattedMessage id=\"patient.extra-infor-doctor.hide-price\" />\r\n                                </span>\r\n                            </div>\r\n\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DoctorExtraInfor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { LANGUAGES } from '../../../utils';\r\n\r\nclass LikeAndShare extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    initFacebookSDK() {\r\n        if (window.FB) {\r\n            window.FB.XFBML.parse();\r\n        }\r\n\r\n        let { language } = this.props;\r\n        let locale = language === LANGUAGES.VI ? 'vi_VN' : 'en_US';\r\n        window.fbAsyncInit = function () {\r\n            window.FB.init({\r\n                appId: process.env.REACT_APP_FACEBOOK_APP_ID,\r\n                cookie: true,  // enable cookies to allow the server to access\r\n                // the session\r\n                xfbml: true,  // parse social plugins on this page\r\n                version: 'v2.5' // use version 2.1\r\n            });\r\n        };\r\n        // Load the SDK asynchronously\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) return;\r\n            js = d.createElement(s); js.id = id;\r\n            js.src = `//connect.facebook.net/${locale}/sdk.js`;\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        }(document, 'script', 'facebook-jssdk'));\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.initFacebookSDK();\r\n    }\r\n\r\n\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let { dataHref } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"fb-like\"\r\n                    data-href={dataHref}\r\n                    data-width=\"\"\r\n                    data-layout=\"standard\"\r\n                    data-action=\"like\"\r\n                    data-size=\"small\"\r\n                    data-share=\"true\">\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LikeAndShare);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { LANGUAGES } from '../../../utils';\r\n\r\nclass Comment extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    initFacebookSDK() {\r\n        if (window.FB) {\r\n            window.FB.XFBML.parse();\r\n        }\r\n\r\n        let { language } = this.props;\r\n        let locale = language === LANGUAGES.VI ? 'vi_VN' : 'en_US'\r\n        window.fbAsyncInit = function () {\r\n            window.FB.init({\r\n                appId: process.env.REACT_APP_FACEBOOK_APP_ID,\r\n                cookie: true,  // enable cookies to allow the server to access\r\n                // the session\r\n                xfbml: true,  // parse social plugins on this page\r\n                version: 'v2.5' // use version 2.1\r\n            });\r\n        };\r\n        // Load the SDK asynchronously\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) return;\r\n            js = d.createElement(s); js.id = id;\r\n            js.src = `//connect.facebook.net/${locale}/sdk.js`;\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        }(document, 'script', 'facebook-jssdk'));\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.initFacebookSDK();\r\n    }\r\n\r\n\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            this.initFacebookSDK();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let { width, dataHref, numPost } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <div className=\"fb-comments\"\r\n                    data-href={dataHref}\r\n                    data-width={width ? width : \"\"}\r\n                    data-numposts={numPost ? numPost : 5}>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport './DetailDoctor.scss';\r\nimport { getDetailInforDoctor } from '../../../services/userService';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport DoctorSchedule from './DoctorSchedule';\r\nimport DoctorExtraInfor from './DoctorExtraInfor';\r\nimport LikeAndShare from '../SocialPlugin/LikeAndShare';\r\nimport Comment from '../SocialPlugin/Comment';\r\n\r\nclass DetailDoctor extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            detailDoctor: {},\r\n            currentDoctorId: -1,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            this.setState({\r\n                currentDoctorId: id\r\n            })\r\n\r\n            let res = await getDetailInforDoctor(id);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    detailDoctor: res.data,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    }\r\n\r\n    render() {\r\n        let { language } = this.props;\r\n        let { detailDoctor } = this.state;\r\n        let nameVi = '', nameEn = '';\r\n        if (detailDoctor && detailDoctor.positionData) {\r\n            nameVi = `${detailDoctor.positionData.valueVi}, ${detailDoctor.lastName} ${detailDoctor.firstName} `;\r\n            nameEn = `${detailDoctor.positionData.valueEn}, ${detailDoctor.firstName} ${detailDoctor.lastName}`;\r\n        }\r\n\r\n        let currentURL = +process.env.REACT_APP_IS_LOCALHOST === 1 ?\r\n            \"https://eric-restaurant-bot-tv.herokuapp.com/\" : window.location.href;\r\n\r\n        return (\r\n            <>\r\n                <HomeHeader\r\n                    isShowBanner={false}\r\n                />\r\n                <div className=\"doctor-detail-container\">\r\n                    <div className=\"intro-doctor\">\r\n                        <div\r\n                            className=\"content-left\"\r\n                            style={{ backgroundImage: `url(${detailDoctor && detailDoctor.image ? detailDoctor.image : ''})` }}>\r\n\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <div className=\"up\">\r\n                                {language === LANGUAGES.VI ? nameVi : nameEn}\r\n                            </div>\r\n                            <div className=\"down\">\r\n                                {detailDoctor && detailDoctor.Markdown\r\n                                    && detailDoctor.Markdown.description\r\n                                    &&\r\n                                    <span>\r\n                                        {detailDoctor.Markdown.description}\r\n                                    </span>\r\n                                }\r\n                                <div className=\"like-share-plugin\">\r\n                                    <LikeAndShare\r\n                                        dataHref={currentURL}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"schedule-doctor\">\r\n                        <div className=\"content-left\">\r\n                            <DoctorSchedule\r\n                                doctorIdFromParent={this.state.currentDoctorId}\r\n                            />\r\n                        </div>\r\n                        <div className=\"content-right\">\r\n                            <DoctorExtraInfor\r\n                                doctorIdFromParent={this.state.currentDoctorId}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"detail-infor-doctor\">\r\n                        {detailDoctor && detailDoctor.Markdown && detailDoctor.Markdown.contentHTML\r\n                            &&\r\n                            <div dangerouslySetInnerHTML={{ __html: detailDoctor.Markdown.contentHTML }}>\r\n\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"comment-doctor\">\r\n                        <Comment\r\n                            dataHref={currentURL}\r\n                            width={\"100%\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailDoctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './ManageSchedule.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Select from 'react-select';\r\nimport * as actions from \"../../../store/actions\"\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from 'lodash';\r\nimport { saveBulkScheduleDoctor } from '../../../services/userService';\r\n\r\nclass ManageSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listDoctors: [],\r\n            selectedDoctor: {},\r\n            currentDate: '',\r\n            rangeTime: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTime();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0) {\r\n                data = data.map(item => ({ ...item, isSelected: false }))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n\r\n\r\n\r\n\r\n        // if (prevProps.language !== this.props.language) {\r\n        //     let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n        //     this.setState({\r\n        //         listDoctors: dataSelect\r\n        //     })\r\n        // }\r\n    }\r\n\r\n    buildDataInputSelect = (inputData) => {\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            inputData.map((item, index) => {\r\n                let object = {};\r\n                let labelVi = `${item.lastName} ${item.firstName}`;\r\n                let labelEn = `${item.firstName} ${item.lastName}`\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object)\r\n            })\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({ selectedDoctor: selectedOption });\r\n    }\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        })\r\n    }\r\n\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            })\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSaveSchedule = async () => {\r\n        let { rangeTime, selectedDoctor, currentDate } = this.state;\r\n        let result = [];\r\n\r\n        if (!currentDate) {\r\n            toast.error(\"Invalid date! \");\r\n            return;\r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)) {\r\n            toast.error(\"Invalid selected doctor! \");\r\n            return;\r\n        }\r\n\r\n        // let formatedDate = moment(currentDate).format(dateFormat.SEND_TO_SERVER);\r\n        //  = moment(currentDate).unix();\r\n        let formatedDate = new Date(currentDate).getTime();\r\n\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, index) => {\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value; // value: label\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object);\r\n                })\r\n            } else {\r\n                toast.error(\"Invalid selected time! \");\r\n                return;\r\n            }\r\n        }\r\n\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectedDoctor.value,\r\n            formatedDate: formatedDate\r\n        })\r\n\r\n        if (res && res.errCode === 0) {\r\n            toast.success(\"Save Infor succeed!\");\r\n\r\n        } else {\r\n            toast.error(\"errror saveBulkScheduleDoctor \");\r\n            console.log('erorr saveBulkScheduleDoctor >>> res: ', res)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let { rangeTime } = this.state;\r\n        let { language } = this.props;\r\n        let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\r\n\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\" />\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label> <FormattedMessage id=\"manage-schedule.choose-doctor\" /></label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.listDoctors}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label><FormattedMessage id=\"manage-schedule.choose-date\" /></label>\r\n                            <DatePicker\r\n                                onChange={this.handleOnchangeDatePicker}\r\n                                className=\"form-control\"\r\n                                value={this.state.currentDate}\r\n                                minDate={yesterday}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                                rangeTime.map((item, index) => {\r\n                                    return (\r\n                                        <button\r\n                                            className={item.isSelected === true ? \"btn btn-schedule active\" : \"btn btn-schedule\"}\r\n                                            key={index}\r\n                                            onClick={() => this.handleClickBtnTime(item)}\r\n                                        >\r\n                                            {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                        </button>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\"\r\n                                onClick={() => this.handleSaveSchedule()}\r\n                            >\r\n                                <FormattedMessage id=\"manage-schedule.save\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTime: () => dispatch(actions.fetchAllScheduleTime()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './RemedyModal.scss';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { toast } from \"react-toastify\";\r\nimport moment from 'moment';\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\nclass RemedyModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: ''\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnchangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnchangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n    }\r\n\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy } = this.props;\r\n\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenModal}\r\n                className={'booking-modal-container'}\r\n                size=\"md\"\r\n                centered\r\n            // backdrop={true}\r\n            >\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Gửi hóa đơn khám bệnh thành công</h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">×</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>Email bệnh nhân</label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnchangeEmail(event)}\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>Chọn file đơn thuốc</label>\r\n                            <input className=\"form-control-file\" type=\"file\"\r\n                                onChange={(event) => this.handleOnchangeImage(event)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => this.handleSendRemedy()}>Send</Button>{' '}\r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        genders: state.admin.genders,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport { getAllPatientForDoctor, postSendRemedy } from '../../../services/userService';\r\nimport moment from 'moment';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport RemedyModal from './RemedyModal';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\n\r\nclass ManagePatient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.getDataPatient()\r\n    }\r\n\r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n\r\n        let res = await getAllPatientForDoctor({\r\n            doctorId: user.id,\r\n            date: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    handleOnchangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        }, async () => {\r\n            await this.getDataPatient()\r\n        })\r\n    }\r\n\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName\r\n        }\r\n\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data\r\n        })\r\n    }\r\n\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal: false,\r\n            dataModal: {}\r\n        })\r\n    }\r\n\r\n    sendRemedy = async (dataChild) => {\r\n        let { dataModal } = this.state;\r\n        this.setState({\r\n            isShowLoading: true\r\n        })\r\n\r\n        let res = await postSendRemedy({\r\n            email: dataChild.email,\r\n            imgBase64: dataChild.imgBase64,\r\n            doctorId: dataModal.doctorId,\r\n            patientId: dataModal.patientId,\r\n            timeType: dataModal.timeType,\r\n            language: this.props.language,\r\n            patientName: dataModal.patientName\r\n        });\r\n\r\n\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.success('Send Remedy succeeds:');\r\n            this.closeRemedyModal();\r\n            await this.getDataPatient();\r\n        } else {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.error('Something wrongs....');\r\n            console.log('error send remedy: ', res)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { dataPatient, isOpenRemedyModal, dataModal } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <>\r\n                <LoadingOverlay\r\n                    active={this.state.isShowLoading}\r\n                    spinner\r\n                    text='Loading...'\r\n                >\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\">\r\n                            Quản lý bệnh nhân khám bệnh\r\n                        </div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label>Chọn ngày khám</label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnchangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate}\r\n\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-12 table-manange-patient\">\r\n                                <table style={{ width: '100%' }} >\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>STT</th>\r\n                                            <th>Thời gian</th>\r\n                                            <th>Họ và tên</th>\r\n                                            <th>Địa chỉ</th>\r\n                                            <th>Giới tính</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                    item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                let gender = language === LANGUAGES.VI ?\r\n                                                    item.patientData.genderData.valueVi : item.patientData.genderData.valueEn\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>{gender}</td>\r\n                                                        <td>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnConfirm(item)}>\r\n                                                                Xác nhận\r\n                                                            </button>\r\n\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n\r\n                                            :\r\n\r\n                                            <tr>\r\n                                                <td colSpan=\"6\" style={{ textAlign: \"center\" }}>no data</td>\r\n                                            </tr>\r\n                                        }\r\n\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <RemedyModal\r\n                        isOpenModal={isOpenRemedyModal}\r\n                        dataModal={dataModal}\r\n                        closeRemedyModal={this.closeRemedyModal}\r\n                        sendRemedy={this.sendRemedy}\r\n                    />\r\n\r\n                </LoadingOverlay>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatient);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport ManageSchedule from '../containers/System/Doctor/ManageSchedule';\r\nimport Header from '../containers/Header/Header';\r\nimport ManagePatient from '../containers/System/Doctor/ManagePatient';\r\n\r\nclass Doctor extends Component {\r\n\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/doctor/manage-schedule\" component={ManageSchedule} />\r\n                            <Route path=\"/doctor/manage-patient\" component={ManagePatient} />\r\n\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        systemMenuPath: state.app.systemMenuPath,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Doctor);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { postVerifyBookAppointment } from \"../../services/userService\";\r\nimport HomeHeader from '../HomePage/HomeHeader';\r\nimport './VerifyEmail.scss';\r\n\r\nclass VerifyEmail extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusVerify: false,\r\n            errCode: 0\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.location && this.props.location.search) {\r\n            let urlParams = new URLSearchParams(this.props.location.search);\r\n            let token = urlParams.get('token');\r\n            let doctorId = urlParams.get('doctorId');\r\n            let res = await postVerifyBookAppointment({\r\n                token: token,\r\n                doctorId: doctorId\r\n            })\r\n\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    statusVerify: true,\r\n                    errCode: res.errCode\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    statusVerify: true,\r\n                    errCode: res && res.errCode ? res.errCode : -1\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let { statusVerify, errCode } = this.state;\r\n        return (\r\n            <>\r\n                <HomeHeader />\r\n                <div className=\"verify-email-container\">\r\n                    {statusVerify === false ?\r\n                        <div>\r\n                            Loading data...\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            {+errCode === 0 ?\r\n                                <div className=\"infor-booking\"> Xác nhận lịch hẹn thành công!</div>\r\n                                :\r\n                                <div className=\"infor-booking\">Lịch hẹn không tồn tại hoặc đã được xác nhận!</div>\r\n                            }\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VerifyEmail);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './DetailSpecialty.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\nimport { getAllDetailSpecialtyById, getAllCodeService } from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES } from '../../../utils';\r\n\r\nclass DetailSpecialty extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailSpecialty: {},\r\n            listProvince: []\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n\r\n            let res = await getAllDetailSpecialtyById({\r\n                id: id,\r\n                location: 'ALL'\r\n            });\r\n\r\n            let resProvince = await getAllCodeService('PROVINCE');\r\n\r\n            if (res && res.errCode === 0 && resProvince && resProvince.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorSpecialty;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n\r\n                let dataProvince = resProvince.data;\r\n                if (dataProvince && dataProvince.length > 0) {\r\n                    dataProvince.unshift({\r\n                        createdAt: null,\r\n                        keyMap: \"ALL\",\r\n                        type: \"PROVINCE\",\r\n                        valueEn: \"ALL\",\r\n                        valueVi: \"Toàn quốc\",\r\n                    })\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                    listProvince: dataProvince ? dataProvince : []\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleOnChangeSelect = async (event) => {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let location = event.target.value;\r\n\r\n            let res = await getAllDetailSpecialtyById({\r\n                id: id,\r\n                location: location\r\n            });\r\n\r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorSpecialty;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailSpecialty, listProvince } = this.state;\r\n\r\n        console.log('hoi dan it channel check state: ', this.state)\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-spcialty\">\r\n                        {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty)\r\n                            &&\r\n                            <div dangerouslySetInnerHTML={{ __html: dataDetailSpecialty.descriptionHTML }}>\r\n\r\n                            </div>\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"search-sp-doctor\">\r\n                        <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n                            {listProvince && listProvince.length > 0 &&\r\n                                listProvince.map((item, index) => {\r\n                                    return (\r\n                                        <option key={index} value={item.keyMap}>\r\n                                            {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                        </option>)\r\n                                })\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                    {arrDoctorId && arrDoctorId.length > 0 &&\r\n                        arrDoctorId.map((item, index) => {\r\n                            return (\r\n                                <div className=\"each-doctor\" key={index}>\r\n                                    <div className=\"dt-content-left\">\r\n                                        <div className=\"profile-doctor\">\r\n                                            <ProfileDoctor\r\n                                                doctorId={item}\r\n                                                isShowDescriptionDoctor={true}\r\n                                                isShowLinkDetail={true}\r\n                                                isShowPrice={false}\r\n                                            //  dataTime={dataTime}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dt-content-right\">\r\n                                        <div className=\"doctor-schdule\">\r\n                                            <DoctorSchedule\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"doctor-extra-infor\">\r\n                                            <DoctorExtraInfor\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport './DetailClinic.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\nimport { getAllDetailClinicById, getAllCodeService } from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES } from '../../../utils';\r\n\r\nclass DetailClinic extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailClinic: {},\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n\r\n            let res = await getAllDetailClinicById({\r\n                id: id\r\n            });\r\n\r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorClinic;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    dataDetailClinic: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailClinic } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-spcialty\">\r\n                        {dataDetailClinic && !_.isEmpty(dataDetailClinic)\r\n                            &&\r\n                            <>\r\n                                <div>{dataDetailClinic.name}</div>\r\n                                <div dangerouslySetInnerHTML={{ __html: dataDetailClinic.descriptionHTML }}>\r\n\r\n                                </div>\r\n                            </>\r\n                        }\r\n\r\n                    </div>\r\n\r\n                    {arrDoctorId && arrDoctorId.length > 0 &&\r\n                        arrDoctorId.map((item, index) => {\r\n                            return (\r\n                                <div className=\"each-doctor\" key={index}>\r\n                                    <div className=\"dt-content-left\">\r\n                                        <div className=\"profile-doctor\">\r\n                                            <ProfileDoctor\r\n                                                doctorId={item}\r\n                                                isShowDescriptionDoctor={true}\r\n                                                isShowLinkDetail={true}\r\n                                                isShowPrice={false}\r\n                                            //  dataTime={dataTime}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dt-content-right\">\r\n                                        <div className=\"doctor-schdule\">\r\n                                            <DoctorSchedule\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"doctor-extra-infor\">\r\n                                            <DoctorExtraInfor\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailClinic);\r\n","import React, { Component, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { ConnectedRouter as Router } from 'connected-react-router';\r\nimport { history } from '../redux'\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { userIsAuthenticated, userIsNotAuthenticated } from '../hoc/authentication';\r\nimport { path } from '../utils'\r\nimport Home from '../routes/Home';\r\nimport Login from './Auth/Login';\r\nimport System from '../routes/System';\r\nimport { CustomToastCloseButton } from '../components/CustomToast';\r\nimport HomePage from './HomePage/HomePage.js';\r\nimport CustomScrollbars from \"../components/CustomScrollbars\";\r\nimport DetailDoctor from './Patient/Doctor/DetailDoctor';\r\nimport Doctor from '../routes/Doctor';\r\nimport VerifyEmail from './Patient/VerifyEmail';\r\nimport DetailSpecialty from './Patient/Specialty/DetailSpecialty';\r\nimport DetailClinic from './Patient/Clinic/DetailClinic';\r\n\r\nclass App extends Component {\r\n\r\n    handlePersistorState = () => {\r\n        const { persistor } = this.props;\r\n        let { bootstrapped } = persistor.getState();\r\n        if (bootstrapped) {\r\n            if (this.props.onBeforeLift) {\r\n                Promise.resolve(this.props.onBeforeLift())\r\n                    .then(() => this.setState({ bootstrapped: true }))\r\n                    .catch(() => this.setState({ bootstrapped: true }));\r\n            } else {\r\n                this.setState({ bootstrapped: true });\r\n            }\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handlePersistorState();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Router history={history}>\r\n                    <div className=\"main-container\">\r\n                        <div className=\"content-container\">\r\n                            <CustomScrollbars style={{ height: '100vh', width: '100%' }}>\r\n                                <Switch>\r\n                                    <Route path={path.HOME} exact component={(Home)} />\r\n                                    <Route path={path.LOGIN} component={userIsNotAuthenticated(Login)} />\r\n                                    <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />\r\n                                    <Route path={'/doctor/'} component={userIsAuthenticated(Doctor)} />\r\n\r\n                                    <Route path={path.HOMEPAGE} component={HomePage} />\r\n                                    <Route path={path.DETAIL_DOCTOR} component={DetailDoctor} />\r\n                                    <Route path={path.DETAIL_SPCIALTY} component={DetailSpecialty} />\r\n                                    <Route path={path.DETAIL_CLINIC} component={DetailClinic} />\r\n\r\n                                    <Route path={path.VERIFY_EMAIL_BOOKING} component={VerifyEmail} />\r\n\r\n\r\n                                </Switch>\r\n                            </CustomScrollbars>\r\n                        </div>\r\n\r\n                        {/* <ToastContainer\r\n                            className=\"toast-container\" toastClassName=\"toast-item\" bodyClassName=\"toast-item-body\"\r\n                            autoClose={false} hideProgressBar={true} pauseOnHover={false}\r\n                            pauseOnFocusLoss={true} closeOnClick={false} draggable={false}\r\n                            closeButton={<CustomToastCloseButton />}\r\n                        /> */}\r\n\r\n                        <ToastContainer\r\n                            position=\"bottom-right\"\r\n                            autoClose={5000}\r\n                            hideProgressBar={false}\r\n                            newestOnTop={false}\r\n                            closeOnClick\r\n                            rtl={false}\r\n                            pauseOnFocusLoss\r\n                            draggable\r\n                            pauseOnHover\r\n                        />\r\n                    </div>\r\n                </Router>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        started: state.app.started,\r\n        isLoggedIn: state.user.isLoggedIn\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { IntlProvider } from \"react-intl\";\r\n\r\nimport '@formatjs/intl-pluralrules/polyfill';\r\nimport '@formatjs/intl-pluralrules/locale-data/en';\r\nimport '@formatjs/intl-pluralrules/locale-data/vi';\r\n\r\nimport '@formatjs/intl-relativetimeformat/polyfill';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/en';\r\nimport '@formatjs/intl-relativetimeformat/locale-data/vi';\r\n\r\nimport { LanguageUtils } from '../utils'\r\n\r\nconst messages = LanguageUtils.getFlattenedMessages();\r\n\r\nclass IntlProviderWrapper extends Component {\r\n\r\n    render() {\r\n        const { children, language } = this.props;\r\n        return (\r\n            <IntlProvider\r\n                locale={language}\r\n                messages={messages[language]}\r\n                defaultLocale=\"vi\">\r\n                {children}\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(IntlProviderWrapper);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './styles/styles.scss';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport IntlProviderWrapper from \"./hoc/IntlProviderWrapper\";\r\n\r\n\r\nimport { Provider } from 'react-redux';\r\nimport reduxStore, { persistor } from './redux';\r\n\r\nconst renderApp = () => {\r\n    ReactDOM.render(\r\n        <Provider store={reduxStore}>\r\n            <IntlProviderWrapper>\r\n                <App persistor={persistor}/>\r\n            </IntlProviderWrapper>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrenderApp();\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const path = {\r\n    HOME: '/',\r\n    HOMEPAGE: '/home',\r\n    LOGIN: '/login',\r\n    LOG_OUT: '/logout',\r\n    SYSTEM: '/system',\r\n    DETAIL_DOCTOR: '/detail-doctor/:id',\r\n    DETAIL_SPCIALTY: '/detail-specialty/:id',\r\n    DETAIL_CLINIC: '/detail-clinic/:id',\r\n\r\n\r\n    VERIFY_EMAIL_BOOKING: '/verify-booking'\r\n};\r\n\r\nexport const LANGUAGES = {\r\n    VI: 'vi',\r\n    EN: 'en'\r\n};\r\n\r\nexport const CRUD_ACTIONS = {\r\n    CREATE: \"CREATE\",\r\n    EDIT: \"EDIT\",\r\n    DELETE: \"DELETE\",\r\n    READ: \"READ\"\r\n};\r\n\r\nexport const dateFormat = {\r\n    SEND_TO_SERVER: 'DD/MM/YYYY'\r\n};\r\n\r\nexport const YesNoObj = {\r\n    YES: 'Y',\r\n    NO: 'N'\r\n}\r\n\r\nexport const USER_ROLE = {\r\n    ADMIN: 'R1',\r\n    DOCTOR: 'R2',\r\n    PATIENT: 'R3'\r\n}\r\n","class CommonUtils {\r\n    static getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = error => reject(error);\r\n        });\r\n    }\r\n}\r\n\r\nexport default CommonUtils;","class KeyCodeUtils {\r\n\r\n    static UP = 38;\r\n\r\n    static DOWN = 40;\r\n\r\n    static TAB = 9;\r\n\r\n    static ENTER = 13;\r\n\r\n    static E = 69;\r\n\r\n    static ESCAPE = 27; \r\n\r\n    static isNavigation(e) {\r\n        return (e >= 33 && e <= 40) || e === 9 || e === 8 || e === 46 || e === 14 || e === 13;\r\n    }\r\n\r\n    static isNumeric(e) {\r\n        return (e >= 48 && e <= 57) || (e >= 96 && e <= 105);\r\n    }\r\n    static isAlphabetic(e) {\r\n        return (e >= 65 && e <= 90);\r\n    }\r\n    static isDecimal(e) {\r\n        return e === 190 || e === 188 || e === 108 || e === 110;\r\n    }\r\n\r\n    static isDash(e) {\r\n        return e === 109 || e === 189;\r\n    }\r\n}\r\n\r\nexport default KeyCodeUtils;","import messages_vi from '../translations/vi.json';\r\nimport messages_en from '../translations/en.json';\r\n\r\nconst flattenMessages = ((nestedMessages, prefix = '') => {\r\n    if (nestedMessages == null) {\r\n        return {}\r\n    }\r\n    return Object.keys(nestedMessages).reduce((messages, key) => {\r\n        const value = nestedMessages[key];\r\n        const prefixedKey = prefix ? `${prefix}.${key}` : key;\r\n\r\n        if (typeof value === 'string') {\r\n            Object.assign(messages, {[prefixedKey]: value})\r\n        } else {\r\n            Object.assign(messages, flattenMessages(value, prefixedKey))\r\n        }\r\n\r\n        return messages\r\n    }, {})\r\n});\r\n\r\nconst messages = {\r\n    'vi': flattenMessages(messages_vi),\r\n    'en': flattenMessages(messages_en),\r\n};\r\n\r\nexport default class LanguageUtils {\r\n    static getMessageByKey(key, lang) {\r\n        return messages[lang][key]\r\n    }\r\n\r\n    static getFlattenedMessages() {\r\n        return messages;\r\n    }\r\n}","import React, { Component, Fragment } from 'react';\r\nimport { FormattedMessage, FormattedTime } from 'react-intl';\r\n\r\nimport CustomScrollBar from '../components/CustomScrollbars';\r\n\r\nimport './CustomToast.scss';\r\n\r\nclass CustomToast extends Component {\r\n\r\n    render() {\r\n        const { titleId, message, messageId, time } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <div className=\"custom-toast\">\r\n                    <div className=\"toast-title\">\r\n                        {time && (\r\n                            <span className=\"date\">\r\n                                <FormattedTime hour='numeric' minute='numeric' second='numeric' hour12={true} value={time} />\r\n                            </span>\r\n                        )}\r\n                        <i className=\"fa fa-fw fa-exclamation-triangle\" />\r\n                        <FormattedMessage id={titleId} />\r\n                    </div>\r\n                    {\r\n                        (message && typeof message === 'object') ?\r\n                            <CustomScrollBar autoHeight={true} autoHeightMin={50} autoHeightMax={100}>\r\n                                {\r\n                                    message.map((msg, index) => {\r\n                                        return (\r\n                                            <Fragment key={index}>\r\n                                                <div className=\"toast-content\">{msg}</div>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </CustomScrollBar> :\r\n                            <div className=\"toast-content\">\r\n                                {message ? message : (messageId ? (<FormattedMessage id={messageId} />) : null)}\r\n                            </div>\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport class CustomToastCloseButton extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <button type=\"button\" className=\"toast-close\" onClick={this.props.closeToast}>\r\n                <i className=\"fa fa-fw fa-times-circle\" />\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomToast;","import React, { Component } from 'react';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\nimport './CustomScrollbars.scss';\r\n\r\nclass CustomScrollbars extends Component {\r\n\r\n    ref = React.createRef();\r\n\r\n    getScrollLeft =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollLeft();\r\n    }\r\n    getScrollTop =()=>{\r\n        const scrollbars = this.ref.current;\r\n        return scrollbars.getScrollTop();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const targetScrollTop = scrollbars.getScrollHeight();\r\n        this.scrollTo(targetScrollTop);\r\n    };\r\n\r\n    scrollTo = (targetTop) => {\r\n        const { quickScroll } = this.props;\r\n        if (!this.ref || !this.ref.current) {\r\n            return;\r\n        }\r\n        const scrollbars = this.ref.current;\r\n        const originalTop = scrollbars.getScrollTop();\r\n        let iteration = 0;\r\n\r\n        const scroll = () => {\r\n            iteration++;\r\n            if (iteration > 30) {\r\n                return;\r\n            }\r\n            scrollbars.scrollTop(originalTop + (targetTop - originalTop) / 30 * iteration);\r\n\r\n            if (quickScroll && quickScroll === true) {\r\n                scroll();\r\n            } else {\r\n                setTimeout(() => {\r\n                    scroll();\r\n                }, 20);\r\n            }\r\n        };\r\n\r\n        scroll();\r\n    };\r\n\r\n    renderTrackHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderTrackVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"track-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderThumbHorizontal = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-horizontal\" />\r\n        );\r\n    };\r\n\r\n    renderThumbVertical = (props) => {\r\n        return (\r\n            <div {...props} className=\"thumb-vertical\" />\r\n        );\r\n    };\r\n\r\n    renderNone = (props) => {\r\n        return (\r\n            <div />\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const { className, disableVerticalScroll, disableHorizontalScroll, children,...otherProps } = this.props;\r\n        return (\r\n            <Scrollbars\r\n                ref={this.ref}\r\n                autoHide={true}\r\n                autoHideTimeout={200}\r\n                hideTracksWhenNotNeeded={true}\r\n                className={className ? className + ' custom-scrollbar' : 'custom-scrollbar'}\r\n                {...otherProps}\r\n                renderTrackHorizontal={disableHorizontalScroll ? this.renderNone : this.renderTrackHorizontal}\r\n                renderTrackVertical={disableVerticalScroll ? this.renderNone : this.renderTrackVertical}\r\n                renderThumbHorizontal={disableHorizontalScroll ? this.renderNone : this.renderThumbHorizontal}\r\n                renderThumbVertical={disableVerticalScroll ? this.renderNone : this.renderThumbVertical}\r\n            >\r\n                {children}\r\n            </Scrollbars>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomScrollbars;"],"sourceRoot":""}